{"ast":null,"code":"import _regeneratorRuntime from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport { web3Loaded, web3AccountLoaded, tokenLoaded, exchangeLoaded, cancelledOrdersLoaded, filledOrdersLoaded, allOrdersLoaded, orderCancelling, orderCancelled, orderFilling, orderFilled, etherBalanceLoaded, tokenBalanceLoaded, exchangeEtherBalanceLoaded, exchangeTokenBalanceLoaded, balancesLoaded, balancesLoading, buyOrderMaking, sellOrderMaking, orderMade } from './actions';\nimport Token from '../abis/Token.json';\nimport Exchange from '../abis/Exchange.json';\nimport { ETHER_ADDRESS } from '../helpers';\nexport var loadWeb3 = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n    var web3;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            web3 = new Web3(window.ethereum);\n            window.ethereum.enable();\n            dispatch(web3Loaded(web3));\n            return _context.abrupt(\"return\", web3);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadWeb3(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var loadAccount = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(web3, dispatch) {\n    var accounts, account;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return web3.eth.getAccounts();\n\n          case 2:\n            accounts = _context2.sent;\n            account = accounts[0];\n            dispatch(web3AccountLoaded(account));\n            return _context2.abrupt(\"return\", account);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function loadAccount(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var loadToken = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(web3, networkId, dispatch) {\n    var token;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address);\n            dispatch(tokenLoaded(token));\n            return _context3.abrupt(\"return\", token);\n\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log('Contract not deployed to the current network. Please select another network with Metamask.');\n            return _context3.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 6]]);\n  }));\n\n  return function loadToken(_x4, _x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var loadExchange = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(web3, networkId, dispatch) {\n    var exchange;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address);\n            dispatch(exchangeLoaded(exchange));\n            return _context4.abrupt(\"return\", exchange);\n\n          case 6:\n            _context4.prev = 6;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.log('Contract not deployed to the current network. Please select another network with Metamask.');\n            return _context4.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 6]]);\n  }));\n\n  return function loadExchange(_x7, _x8, _x9) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var loadAllOrders = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(exchange, dispatch) {\n    var cancelStream, cancelledOrders, tradeStream, filledOrders, orderStream, allOrders;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return exchange.getPastEvents('Cancel', {\n              fromBlock: 0,\n              toBlock: 'latest'\n            });\n\n          case 2:\n            cancelStream = _context5.sent;\n            //Format cancelled orders\n            cancelledOrders = cancelStream.map(function (event) {\n              return event.returnValues;\n            }); //Add cancelled orders to the redux store\n\n            dispatch(cancelledOrdersLoaded(cancelledOrders)); //Fetch filled orders with the \"Trade\" event stream\n\n            _context5.next = 7;\n            return exchange.getPastEvents('Trade', {\n              fromBlock: 0,\n              toBlock: 'latest'\n            });\n\n          case 7:\n            tradeStream = _context5.sent;\n            //Format filled orders\n            filledOrders = tradeStream.map(function (event) {\n              return event.returnValues;\n            }); //Add filled orders to the redux store\n\n            dispatch(filledOrdersLoaded(filledOrders)); //Fetch all orders with the \"Order\" event stream\n\n            _context5.next = 12;\n            return exchange.getPastEvents('Order', {\n              fromBlock: 0,\n              toBlock: 'latest'\n            });\n\n          case 12:\n            orderStream = _context5.sent;\n            //Format order stream\n            allOrders = orderStream.map(function (event) {\n              return event.returnValues;\n            }); //Add open orders to the redux store\n\n            dispatch(allOrdersLoaded(allOrders));\n\n          case 15:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function loadAllOrders(_x10, _x11) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var subscribeToEvents = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(exchange, dispatch) {\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            exchange.events.Cancel({}, function (error, event) {\n              dispatch(orderCancelled(event.returnValues));\n            });\n            exchange.events.Trade({}, function (error, event) {\n              dispatch(orderFilled(event.returnValues));\n            });\n            exchange.events.Deposit({}, function (error, event) {\n              dispatch(balancesLoaded());\n            });\n            exchange.events.Withdraw({}, function (error, event) {\n              dispatch(balancesLoaded());\n            });\n            exchange.events.Order({}, function (error, event) {\n              dispatch(orderMade(event.returnValues));\n            });\n\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function subscribeToEvents(_x12, _x13) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var cancelOrder = function cancelOrder(dispatch, exchange, order, account) {\n  exchange.methods.cancelOrder(order.id).send({\n    from: account\n  }).on('transactionHash', function (hash) {\n    dispatch(orderCancelling());\n  }).on('error', function (error) {\n    console.log(error);\n    window.alert('There was an error!');\n  });\n};\nexport var fillOrder = function fillOrder(dispatch, exchange, order, account) {\n  exchange.methods.fillOrder(order.id).send({\n    from: account\n  }).on('transactionHash', function (hash) {\n    dispatch(orderFilling());\n  }).on('error', function (error) {\n    console.log(error);\n    window.alert('There was an error!');\n  });\n};\nexport var loadBalances = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(dispatch, web3, exchange, token, account) {\n    var etherBalance, tokenBalance, exchangeEtherBalance, exchangeTokenBalance;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return web3.eth.getBalance(account);\n\n          case 2:\n            etherBalance = _context7.sent;\n            dispatch(etherBalanceLoaded(etherBalance)); // Token balance in wallet\n\n            _context7.next = 6;\n            return token.methods.balanceOf(account).call();\n\n          case 6:\n            tokenBalance = _context7.sent;\n            dispatch(tokenBalanceLoaded(tokenBalance)); // Ether balance in exchange\n\n            _context7.next = 10;\n            return exchange.methods.balanceOf(ETHER_ADDRESS, account).call();\n\n          case 10:\n            exchangeEtherBalance = _context7.sent;\n            dispatch(exchangeEtherBalanceLoaded(exchangeEtherBalance)); // Token balance in exchange\n\n            _context7.next = 14;\n            return exchange.methods.balanceOf(token.options.address, account).call();\n\n          case 14:\n            exchangeTokenBalance = _context7.sent;\n            dispatch(exchangeTokenBalanceLoaded(exchangeTokenBalance)); // Trigger all balances loaded\n\n            dispatch(balancesLoaded());\n\n          case 17:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n\n  return function loadBalances(_x14, _x15, _x16, _x17, _x18) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nexport var depositEther = function depositEther(dispatch, exchange, web3, amount, account) {\n  exchange.methods.depositEther().send({\n    from: account,\n    value: web3.utils.toWei(amount, 'ether')\n  }).on('transactionHash', function (hash) {\n    dispatch(balancesLoading());\n  }).on('error', function (error) {\n    console.error(error);\n    window.alert(\"There was an error!\");\n  });\n};\nexport var withdrawEther = function withdrawEther(dispatch, exchange, web3, amount, account) {\n  exchange.methods.withdrawEther(web3.utils.toWei(amount, 'ether')).send({\n    from: account\n  }).on('transactionHash', function (hash) {\n    dispatch(balancesLoading());\n  }).on('error', function (error) {\n    console.error(error);\n    window.alert(\"There was an error!\");\n  });\n};\nexport var depositToken = function depositToken(dispatch, exchange, web3, token, amount, account) {\n  amount = web3.utils.toWei(amount, 'ether');\n  token.methods.approve(exchange.options.address, amount).send({\n    from: account\n  }).on('transactionHash', function (hash) {\n    exchange.methods.depositToken(token.options.address, amount).send({\n      from: account\n    }).on('transactionHash', function (hash) {\n      dispatch(balancesLoading());\n    }).on('error', function (error) {\n      console.error(error);\n      window.alert(\"There was an error!\");\n    });\n  });\n};\nexport var withdrawToken = function withdrawToken(dispatch, exchange, web3, token, amount, account) {\n  amount = web3.utils.toWei(amount, 'ether');\n  exchange.methods.withdrawToken(token.options.address, amount).send({\n    from: account\n  }).on('transactionHash', function (hash) {\n    dispatch(balancesLoading());\n  }).on('error', function (error) {\n    console.error(error);\n    window.alert(\"There was an error!\");\n  });\n};\nexport var makeBuyOrder = function makeBuyOrder(dispatch, exchange, token, web3, order, account) {\n  console.log(order.amount);\n  var tokenGet = token.options.address;\n  var amountGet = web3.utils.toWei(order.amount, 'ether');\n  var tokenGive = ETHER_ADDRESS;\n  var amountGive = web3.utils.toWei((order.amount * order.price).toString(), 'ether');\n  exchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({\n    from: account\n  }).on('transactionHash', function (hash) {\n    dispatch(buyOrderMaking());\n  }).on('error', function (error) {\n    console.error(error);\n    window.alert(\"There was an error!\");\n  });\n};\nexport var makeSellOrder = function makeSellOrder(dispatch, exchange, token, web3, order, account) {\n  var tokenGet = ETHER_ADDRESS;\n  var amountGet = web3.utils.toWei((order.amount * order.price).toString(), 'ether');\n  var tokenGive = token.options.address;\n  var amountGive = web3.utils.toWei(order.amount, 'ether');\n  exchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({\n    from: account\n  }).on('transactionHash', function (hash) {\n    dispatch(sellOrderMaking());\n  }).on('error', function (error) {\n    console.error(error);\n    window.alert(\"There was an error!\");\n  });\n}; // export const depositToken = (dispatch, exchange, web3, token, amount, account) => {\n// \tamount = web3.utils.toWei(amount, 'ether')\n// \ttoken.methods.approve(exchange.options.address, amount).send({ from: account })\n// \t.on('transactionHash', (hash) => {\n// \t\texchange.methods.depositToken(token.options.address, amount).send({ from: account })\n// \t\t.on('transactionHash', (hash) => {\n// \t\t\tdispatch(balancesLoading())\n// \t\t})\n// \t\t.on('error', (error) => {\n// \t\t\tconsole.error(error)\n// \t\t\twindow.alert(`There was an error!`)\n// \t\t})\n// \t})\t\n// }\n// export const withdrawToken = (dispatch, exchange, web3, token, amount, account) => {\n// \texchange.methods.withdrawToken(token.options.address, web3.utils.toWei(amount, 'ether')).send({ from: account })\n// \t.on('transactionHash', (hash) => {\n// \t\tdispatch(balancesLoading())\n// \t})\n// \t.on('error', (error) => {\n// \t\tconsole.error(error)\n// \t\twindow.alert(`There was an error!`)\n// \t})\n// }","map":{"version":3,"sources":["/home/mitch/code/blockchain-developer-bootcamp/src/store/interactions.js"],"names":["Web3","web3Loaded","web3AccountLoaded","tokenLoaded","exchangeLoaded","cancelledOrdersLoaded","filledOrdersLoaded","allOrdersLoaded","orderCancelling","orderCancelled","orderFilling","orderFilled","etherBalanceLoaded","tokenBalanceLoaded","exchangeEtherBalanceLoaded","exchangeTokenBalanceLoaded","balancesLoaded","balancesLoading","buyOrderMaking","sellOrderMaking","orderMade","Token","Exchange","ETHER_ADDRESS","loadWeb3","dispatch","web3","window","ethereum","enable","loadAccount","eth","getAccounts","accounts","account","loadToken","networkId","token","Contract","abi","networks","address","console","log","loadExchange","exchange","loadAllOrders","getPastEvents","fromBlock","toBlock","cancelStream","cancelledOrders","map","event","returnValues","tradeStream","filledOrders","orderStream","allOrders","subscribeToEvents","events","Cancel","error","Trade","Deposit","Withdraw","Order","cancelOrder","order","methods","id","send","from","on","hash","alert","fillOrder","loadBalances","getBalance","etherBalance","balanceOf","call","tokenBalance","exchangeEtherBalance","options","exchangeTokenBalance","depositEther","amount","value","utils","toWei","withdrawEther","depositToken","approve","withdrawToken","makeBuyOrder","tokenGet","amountGet","tokenGive","amountGive","price","toString","makeOrder","makeSellOrder"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SACCC,UADD,EAECC,iBAFD,EAGCC,WAHD,EAICC,cAJD,EAKCC,qBALD,EAMCC,kBAND,EAOCC,eAPD,EAQCC,eARD,EASCC,cATD,EAUCC,YAVD,EAWCC,WAXD,EAYCC,kBAZD,EAaCC,kBAbD,EAcCC,0BAdD,EAeCC,0BAfD,EAgBCC,cAhBD,EAiBCC,eAjBD,EAkBCC,cAlBD,EAmBCC,eAnBD,EAoBCC,SApBD,QAqBO,WArBP;AAsBA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,aAAT,QAA8B,YAA9B;AAEA,OAAO,IAAMC,QAAQ;AAAA,sEAAG,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,IADiB,GACV,IAAI1B,IAAJ,CAAS2B,MAAM,CAACC,QAAhB,CADU;AAEvBD,YAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACAJ,YAAAA,QAAQ,CAACxB,UAAU,CAACyB,IAAD,CAAX,CAAR;AAHuB,6CAIhBA,IAJgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARF,QAAQ;AAAA;AAAA;AAAA,GAAd;AAOP,OAAO,IAAMM,WAAW;AAAA,uEAAG,kBAAOJ,IAAP,EAAaD,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACHC,IAAI,CAACK,GAAL,CAASC,WAAT,EADG;;AAAA;AACpBC,YAAAA,QADoB;AAEpBC,YAAAA,OAFoB,GAEVD,QAAQ,CAAC,CAAD,CAFE;AAG1BR,YAAAA,QAAQ,CAACvB,iBAAiB,CAACgC,OAAD,CAAlB,CAAR;AAH0B,8CAInBA,OAJmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXJ,WAAW;AAAA;AAAA;AAAA,GAAjB;AAOP,OAAO,IAAMK,SAAS;AAAA,uEAAG,kBAAOT,IAAP,EAAaU,SAAb,EAAwBX,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEjBY,YAAAA,KAFiB,GAET,IAAIX,IAAI,CAACK,GAAL,CAASO,QAAb,CAAsBjB,KAAK,CAACkB,GAA5B,EAAiClB,KAAK,CAACmB,QAAN,CAAeJ,SAAf,EAA0BK,OAA3D,CAFS;AAGvBhB,YAAAA,QAAQ,CAACtB,WAAW,CAACkC,KAAD,CAAZ,CAAR;AAHuB,8CAIhBA,KAJgB;;AAAA;AAAA;AAAA;AAMvBK,YAAAA,OAAO,CAACC,GAAR,CAAY,4FAAZ;AANuB,8CAOhB,IAPgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATR,SAAS;AAAA;AAAA;AAAA,GAAf;AAWP,OAAO,IAAMS,YAAY;AAAA,uEAAG,kBAAOlB,IAAP,EAAaU,SAAb,EAAwBX,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpBoB,YAAAA,QAFoB,GAET,IAAInB,IAAI,CAACK,GAAL,CAASO,QAAb,CAAsBhB,QAAQ,CAACiB,GAA/B,EAAoCjB,QAAQ,CAACkB,QAAT,CAAkBJ,SAAlB,EAA6BK,OAAjE,CAFS;AAG1BhB,YAAAA,QAAQ,CAACrB,cAAc,CAACyC,QAAD,CAAf,CAAR;AAH0B,8CAInBA,QAJmB;;AAAA;AAAA;AAAA;AAM1BH,YAAAA,OAAO,CAACC,GAAR,CAAY,4FAAZ;AAN0B,8CAOnB,IAPmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZC,YAAY;AAAA;AAAA;AAAA,GAAlB;AAWP,OAAO,IAAME,aAAa;AAAA,uEAAG,kBAAOD,QAAP,EAAiBpB,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEDoB,QAAQ,CAACE,aAAT,CAAuB,QAAvB,EAAiC;AAAEC,cAAAA,SAAS,EAAE,CAAb;AAAgBC,cAAAA,OAAO,EAAE;AAAzB,aAAjC,CAFC;;AAAA;AAEtBC,YAAAA,YAFsB;AAG5B;AACMC,YAAAA,eAJsB,GAIJD,YAAY,CAACE,GAAb,CAAiB,UAACC,KAAD;AAAA,qBAAWA,KAAK,CAACC,YAAjB;AAAA,aAAjB,CAJI,EAK5B;;AACA7B,YAAAA,QAAQ,CAACpB,qBAAqB,CAAC8C,eAAD,CAAtB,CAAR,CAN4B,CAQ5B;;AAR4B;AAAA,mBASFN,QAAQ,CAACE,aAAT,CAAwB,OAAxB,EAAiC;AAAEC,cAAAA,SAAS,EAAE,CAAb;AAAgBC,cAAAA,OAAO,EAAE;AAAzB,aAAjC,CATE;;AAAA;AAStBM,YAAAA,WATsB;AAU5B;AACMC,YAAAA,YAXsB,GAWPD,WAAW,CAACH,GAAZ,CAAgB,UAACC,KAAD;AAAA,qBAAWA,KAAK,CAACC,YAAjB;AAAA,aAAhB,CAXO,EAY5B;;AACA7B,YAAAA,QAAQ,CAACnB,kBAAkB,CAACkD,YAAD,CAAnB,CAAR,CAb4B,CAe5B;;AAf4B;AAAA,mBAgBFX,QAAQ,CAACE,aAAT,CAAuB,OAAvB,EAAgC;AAAEC,cAAAA,SAAS,EAAE,CAAb;AAAgBC,cAAAA,OAAO,EAAE;AAAzB,aAAhC,CAhBE;;AAAA;AAgBtBQ,YAAAA,WAhBsB;AAiB5B;AACMC,YAAAA,SAlBsB,GAkBVD,WAAW,CAACL,GAAZ,CAAgB,UAACC,KAAD;AAAA,qBAAWA,KAAK,CAACC,YAAjB;AAAA,aAAhB,CAlBU,EAmB5B;;AACA7B,YAAAA,QAAQ,CAAClB,eAAe,CAACmD,SAAD,CAAhB,CAAR;;AApB4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbZ,aAAa;AAAA;AAAA;AAAA,GAAnB;AAuBP,OAAO,IAAMa,iBAAiB;AAAA,uEAAG,kBAAMd,QAAN,EAAgBpB,QAAhB;AAAA;AAAA;AAAA;AAAA;AAChCoB,YAAAA,QAAQ,CAACe,MAAT,CAAgBC,MAAhB,CAAuB,EAAvB,EAA2B,UAACC,KAAD,EAAQT,KAAR,EAAkB;AAC5C5B,cAAAA,QAAQ,CAAChB,cAAc,CAAC4C,KAAK,CAACC,YAAP,CAAf,CAAR;AACA,aAFD;AAIAT,YAAAA,QAAQ,CAACe,MAAT,CAAgBG,KAAhB,CAAsB,EAAtB,EAA0B,UAACD,KAAD,EAAQT,KAAR,EAAkB;AAC3C5B,cAAAA,QAAQ,CAACd,WAAW,CAAC0C,KAAK,CAACC,YAAP,CAAZ,CAAR;AACA,aAFD;AAIAT,YAAAA,QAAQ,CAACe,MAAT,CAAgBI,OAAhB,CAAwB,EAAxB,EAA4B,UAACF,KAAD,EAAQT,KAAR,EAAkB;AAC7C5B,cAAAA,QAAQ,CAACT,cAAc,EAAf,CAAR;AACA,aAFD;AAIA6B,YAAAA,QAAQ,CAACe,MAAT,CAAgBK,QAAhB,CAAyB,EAAzB,EAA6B,UAACH,KAAD,EAAQT,KAAR,EAAkB;AAC9C5B,cAAAA,QAAQ,CAACT,cAAc,EAAf,CAAR;AACA,aAFD;AAIA6B,YAAAA,QAAQ,CAACe,MAAT,CAAgBM,KAAhB,CAAsB,EAAtB,EAA0B,UAACJ,KAAD,EAAQT,KAAR,EAAkB;AAC3C5B,cAAAA,QAAQ,CAACL,SAAS,CAACiC,KAAK,CAACC,YAAP,CAAV,CAAR;AACA,aAFD;;AAjBgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBK,iBAAiB;AAAA;AAAA;AAAA,GAAvB;AAsBP,OAAO,IAAMQ,WAAW,GAAG,SAAdA,WAAc,CAAC1C,QAAD,EAAWoB,QAAX,EAAqBuB,KAArB,EAA4BlC,OAA5B,EAAwC;AAClEW,EAAAA,QAAQ,CAACwB,OAAT,CAAiBF,WAAjB,CAA6BC,KAAK,CAACE,EAAnC,EAAuCC,IAAvC,CAA4C;AAAEC,IAAAA,IAAI,EAAEtC;AAAR,GAA5C,EACCuC,EADD,CACI,iBADJ,EACuB,UAACC,IAAD,EAAU;AAChCjD,IAAAA,QAAQ,CAACjB,eAAe,EAAhB,CAAR;AACA,GAHD,EAICiE,EAJD,CAII,OAJJ,EAIa,UAACX,KAAD,EAAW;AACvBpB,IAAAA,OAAO,CAACC,GAAR,CAAYmB,KAAZ;AACAnC,IAAAA,MAAM,CAACgD,KAAP,CAAa,qBAAb;AACA,GAPD;AAQA,CATM;AAWP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACnD,QAAD,EAAWoB,QAAX,EAAqBuB,KAArB,EAA4BlC,OAA5B,EAAwC;AAChEW,EAAAA,QAAQ,CAACwB,OAAT,CAAiBO,SAAjB,CAA2BR,KAAK,CAACE,EAAjC,EAAqCC,IAArC,CAA0C;AAAEC,IAAAA,IAAI,EAAEtC;AAAR,GAA1C,EACCuC,EADD,CACI,iBADJ,EACuB,UAACC,IAAD,EAAU;AAChCjD,IAAAA,QAAQ,CAACf,YAAY,EAAb,CAAR;AACA,GAHD,EAIC+D,EAJD,CAII,OAJJ,EAIa,UAACX,KAAD,EAAW;AACvBpB,IAAAA,OAAO,CAACC,GAAR,CAAYmB,KAAZ;AACAnC,IAAAA,MAAM,CAACgD,KAAP,CAAa,qBAAb;AACA,GAPD;AAQA,CATM;AAWP,OAAO,IAAME,YAAY;AAAA,uEAAG,kBAAOpD,QAAP,EAAiBC,IAAjB,EAAuBmB,QAAvB,EAAiCR,KAAjC,EAAwCH,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEAR,IAAI,CAACK,GAAL,CAAS+C,UAAT,CAAoB5C,OAApB,CAFA;;AAAA;AAErB6C,YAAAA,YAFqB;AAG3BtD,YAAAA,QAAQ,CAACb,kBAAkB,CAACmE,YAAD,CAAnB,CAAR,CAH2B,CAK3B;;AAL2B;AAAA,mBAMA1C,KAAK,CAACgC,OAAN,CAAcW,SAAd,CAAwB9C,OAAxB,EAAiC+C,IAAjC,EANA;;AAAA;AAMrBC,YAAAA,YANqB;AAO3BzD,YAAAA,QAAQ,CAACZ,kBAAkB,CAACqE,YAAD,CAAnB,CAAR,CAP2B,CAS3B;;AAT2B;AAAA,mBAUQrC,QAAQ,CAACwB,OAAT,CAAiBW,SAAjB,CAA2BzD,aAA3B,EAA0CW,OAA1C,EAAmD+C,IAAnD,EAVR;;AAAA;AAUrBE,YAAAA,oBAVqB;AAW3B1D,YAAAA,QAAQ,CAACX,0BAA0B,CAACqE,oBAAD,CAA3B,CAAR,CAX2B,CAa3B;;AAb2B;AAAA,mBAcQtC,QAAQ,CAACwB,OAAT,CAAiBW,SAAjB,CAA2B3C,KAAK,CAAC+C,OAAN,CAAc3C,OAAzC,EAAkDP,OAAlD,EAA2D+C,IAA3D,EAdR;;AAAA;AAcrBI,YAAAA,oBAdqB;AAe3B5D,YAAAA,QAAQ,CAACV,0BAA0B,CAACsE,oBAAD,CAA3B,CAAR,CAf2B,CAiB3B;;AACA5D,YAAAA,QAAQ,CAACT,cAAc,EAAf,CAAR;;AAlB2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZ6D,YAAY;AAAA;AAAA;AAAA,GAAlB;AAqBP,OAAO,IAAMS,YAAY,GAAG,SAAfA,YAAe,CAAC7D,QAAD,EAAWoB,QAAX,EAAqBnB,IAArB,EAA2B6D,MAA3B,EAAmCrD,OAAnC,EAA+C;AAC1EW,EAAAA,QAAQ,CAACwB,OAAT,CAAiBiB,YAAjB,GAAgCf,IAAhC,CAAqC;AAAEC,IAAAA,IAAI,EAAEtC,OAAR;AAAiBsD,IAAAA,KAAK,EAAE9D,IAAI,CAAC+D,KAAL,CAAWC,KAAX,CAAiBH,MAAjB,EAAyB,OAAzB;AAAxB,GAArC,EACCd,EADD,CACI,iBADJ,EACuB,UAACC,IAAD,EAAU;AAChCjD,IAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AACA,GAHD,EAICwD,EAJD,CAII,OAJJ,EAIa,UAACX,KAAD,EAAW;AACvBpB,IAAAA,OAAO,CAACoB,KAAR,CAAcA,KAAd;AACAnC,IAAAA,MAAM,CAACgD,KAAP;AACA,GAPD;AAQA,CATM;AAWP,OAAO,IAAMgB,aAAa,GAAG,SAAhBA,aAAgB,CAAClE,QAAD,EAAWoB,QAAX,EAAqBnB,IAArB,EAA2B6D,MAA3B,EAAmCrD,OAAnC,EAA+C;AAC3EW,EAAAA,QAAQ,CAACwB,OAAT,CAAiBsB,aAAjB,CAA+BjE,IAAI,CAAC+D,KAAL,CAAWC,KAAX,CAAiBH,MAAjB,EAAyB,OAAzB,CAA/B,EAAkEhB,IAAlE,CAAuE;AAAEC,IAAAA,IAAI,EAAEtC;AAAR,GAAvE,EACCuC,EADD,CACI,iBADJ,EACuB,UAACC,IAAD,EAAU;AAChCjD,IAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AACA,GAHD,EAICwD,EAJD,CAII,OAJJ,EAIa,UAACX,KAAD,EAAW;AACvBpB,IAAAA,OAAO,CAACoB,KAAR,CAAcA,KAAd;AACAnC,IAAAA,MAAM,CAACgD,KAAP;AACA,GAPD;AAQA,CATM;AAWP,OAAO,IAAMiB,YAAY,GAAG,SAAfA,YAAe,CAACnE,QAAD,EAAWoB,QAAX,EAAqBnB,IAArB,EAA2BW,KAA3B,EAAkCkD,MAAlC,EAA0CrD,OAA1C,EAAsD;AACjFqD,EAAAA,MAAM,GAAG7D,IAAI,CAAC+D,KAAL,CAAWC,KAAX,CAAiBH,MAAjB,EAAyB,OAAzB,CAAT;AAEAlD,EAAAA,KAAK,CAACgC,OAAN,CAAcwB,OAAd,CAAsBhD,QAAQ,CAACuC,OAAT,CAAiB3C,OAAvC,EAAgD8C,MAAhD,EAAwDhB,IAAxD,CAA6D;AAAEC,IAAAA,IAAI,EAAEtC;AAAR,GAA7D,EACCuC,EADD,CACI,iBADJ,EACuB,UAACC,IAAD,EAAU;AAChC7B,IAAAA,QAAQ,CAACwB,OAAT,CAAiBuB,YAAjB,CAA8BvD,KAAK,CAAC+C,OAAN,CAAc3C,OAA5C,EAAqD8C,MAArD,EAA6DhB,IAA7D,CAAkE;AAAEC,MAAAA,IAAI,EAAEtC;AAAR,KAAlE,EACCuC,EADD,CACI,iBADJ,EACuB,UAACC,IAAD,EAAU;AAChCjD,MAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AACA,KAHD,EAICwD,EAJD,CAII,OAJJ,EAIa,UAACX,KAAD,EAAW;AACvBpB,MAAAA,OAAO,CAACoB,KAAR,CAAcA,KAAd;AACAnC,MAAAA,MAAM,CAACgD,KAAP;AACA,KAPD;AAQA,GAVD;AAWA,CAdM;AAgBP,OAAO,IAAMmB,aAAa,GAAG,SAAhBA,aAAgB,CAACrE,QAAD,EAAWoB,QAAX,EAAqBnB,IAArB,EAA2BW,KAA3B,EAAkCkD,MAAlC,EAA0CrD,OAA1C,EAAsD;AAClFqD,EAAAA,MAAM,GAAG7D,IAAI,CAAC+D,KAAL,CAAWC,KAAX,CAAiBH,MAAjB,EAAyB,OAAzB,CAAT;AAEA1C,EAAAA,QAAQ,CAACwB,OAAT,CAAiByB,aAAjB,CAA+BzD,KAAK,CAAC+C,OAAN,CAAc3C,OAA7C,EAAsD8C,MAAtD,EAA8DhB,IAA9D,CAAmE;AAAEC,IAAAA,IAAI,EAAEtC;AAAR,GAAnE,EACCuC,EADD,CACI,iBADJ,EACuB,UAACC,IAAD,EAAU;AAChCjD,IAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AACA,GAHD,EAICwD,EAJD,CAII,OAJJ,EAIa,UAACX,KAAD,EAAW;AACvBpB,IAAAA,OAAO,CAACoB,KAAR,CAAcA,KAAd;AACAnC,IAAAA,MAAM,CAACgD,KAAP;AACA,GAPD;AAQA,CAXM;AAaP,OAAO,IAAMoB,YAAY,GAAG,SAAfA,YAAe,CAACtE,QAAD,EAAWoB,QAAX,EAAqBR,KAArB,EAA4BX,IAA5B,EAAkC0C,KAAlC,EAAyClC,OAAzC,EAAqD;AAChFQ,EAAAA,OAAO,CAACC,GAAR,CAAYyB,KAAK,CAACmB,MAAlB;AACA,MAAMS,QAAQ,GAAG3D,KAAK,CAAC+C,OAAN,CAAc3C,OAA/B;AACA,MAAMwD,SAAS,GAAGvE,IAAI,CAAC+D,KAAL,CAAWC,KAAX,CAAiBtB,KAAK,CAACmB,MAAvB,EAA+B,OAA/B,CAAlB;AACA,MAAMW,SAAS,GAAG3E,aAAlB;AACA,MAAM4E,UAAU,GAAGzE,IAAI,CAAC+D,KAAL,CAAWC,KAAX,CAAiB,CAACtB,KAAK,CAACmB,MAAN,GAAenB,KAAK,CAACgC,KAAtB,EAA6BC,QAA7B,EAAjB,EAA0D,OAA1D,CAAnB;AAEAxD,EAAAA,QAAQ,CAACwB,OAAT,CAAiBiC,SAAjB,CAA2BN,QAA3B,EAAqCC,SAArC,EAAgDC,SAAhD,EAA2DC,UAA3D,EAAuE5B,IAAvE,CAA4E;AAAEC,IAAAA,IAAI,EAAEtC;AAAR,GAA5E,EACCuC,EADD,CACI,iBADJ,EACuB,UAACC,IAAD,EAAU;AAChCjD,IAAAA,QAAQ,CAACP,cAAc,EAAf,CAAR;AACA,GAHD,EAICuD,EAJD,CAII,OAJJ,EAIa,UAACX,KAAD,EAAW;AACvBpB,IAAAA,OAAO,CAACoB,KAAR,CAAcA,KAAd;AACAnC,IAAAA,MAAM,CAACgD,KAAP;AACA,GAPD;AAQA,CAfM;AAiBP,OAAO,IAAM4B,aAAa,GAAG,SAAhBA,aAAgB,CAAC9E,QAAD,EAAWoB,QAAX,EAAqBR,KAArB,EAA4BX,IAA5B,EAAkC0C,KAAlC,EAAyClC,OAAzC,EAAqD;AACjF,MAAM8D,QAAQ,GAAGzE,aAAjB;AACA,MAAM0E,SAAS,GAAGvE,IAAI,CAAC+D,KAAL,CAAWC,KAAX,CAAiB,CAACtB,KAAK,CAACmB,MAAN,GAAenB,KAAK,CAACgC,KAAtB,EAA6BC,QAA7B,EAAjB,EAA0D,OAA1D,CAAlB;AACA,MAAMH,SAAS,GAAG7D,KAAK,CAAC+C,OAAN,CAAc3C,OAAhC;AACA,MAAM0D,UAAU,GAAGzE,IAAI,CAAC+D,KAAL,CAAWC,KAAX,CAAiBtB,KAAK,CAACmB,MAAvB,EAA+B,OAA/B,CAAnB;AAEA1C,EAAAA,QAAQ,CAACwB,OAAT,CAAiBiC,SAAjB,CAA2BN,QAA3B,EAAqCC,SAArC,EAAgDC,SAAhD,EAA2DC,UAA3D,EAAuE5B,IAAvE,CAA4E;AAAEC,IAAAA,IAAI,EAAEtC;AAAR,GAA5E,EACCuC,EADD,CACI,iBADJ,EACuB,UAACC,IAAD,EAAU;AAChCjD,IAAAA,QAAQ,CAACN,eAAe,EAAhB,CAAR;AACA,GAHD,EAICsD,EAJD,CAII,OAJJ,EAIa,UAACX,KAAD,EAAW;AACvBpB,IAAAA,OAAO,CAACoB,KAAR,CAAcA,KAAd;AACAnC,IAAAA,MAAM,CAACgD,KAAP;AACA,GAPD;AAQA,CAdM,C,CAgBP;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import Web3 from 'web3'\nimport { \n\tweb3Loaded,\n\tweb3AccountLoaded,\n\ttokenLoaded,\n\texchangeLoaded,\n\tcancelledOrdersLoaded,\n\tfilledOrdersLoaded,\n\tallOrdersLoaded,\n\torderCancelling,\n\torderCancelled,\n\torderFilling,\n\torderFilled,\n\tetherBalanceLoaded,\n\ttokenBalanceLoaded,\n\texchangeEtherBalanceLoaded,\n\texchangeTokenBalanceLoaded,\n\tbalancesLoaded,\n\tbalancesLoading,\n\tbuyOrderMaking,\n\tsellOrderMaking,\n\torderMade\n} from './actions'\nimport Token from '../abis/Token.json'\nimport Exchange from '../abis/Exchange.json'\nimport { ETHER_ADDRESS } from '../helpers'\n\nexport const loadWeb3 = async (dispatch) => {\n\tconst web3 = new Web3(window.ethereum)\n\twindow.ethereum.enable()\n\tdispatch(web3Loaded(web3))\n\treturn web3\n}\n\nexport const loadAccount = async (web3, dispatch) => {\n\tconst accounts = await web3.eth.getAccounts()\n\tconst account = accounts[0]\n\tdispatch(web3AccountLoaded(account))\n\treturn account\n}\n\nexport const loadToken = async (web3, networkId, dispatch) => {\n\ttry{\n\t\tconst token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address)\n\t\tdispatch(tokenLoaded(token))\n\t\treturn token\n\t} catch (error) {\n\t\tconsole.log('Contract not deployed to the current network. Please select another network with Metamask.')\n\t\treturn null\n\t}\n}\n\nexport const loadExchange = async (web3, networkId, dispatch) => {\n\ttry{\n\t\tconst exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address)\n\t\tdispatch(exchangeLoaded(exchange))\n\t\treturn exchange\n\t} catch (error) {\n\t\tconsole.log('Contract not deployed to the current network. Please select another network with Metamask.')\n\t\treturn null\n\t}\n}\n\nexport const loadAllOrders = async (exchange, dispatch) => {\n\t//Fetch cancelled orders with the \"Cancel\" event stream\n\tconst cancelStream = await exchange.getPastEvents('Cancel', { fromBlock: 0, toBlock: 'latest' })\n\t//Format cancelled orders\n\tconst cancelledOrders = cancelStream.map((event) => event.returnValues)\n\t//Add cancelled orders to the redux store\n\tdispatch(cancelledOrdersLoaded(cancelledOrders))\n\n\t//Fetch filled orders with the \"Trade\" event stream\n\tconst tradeStream = await exchange.getPastEvents( 'Trade', { fromBlock: 0, toBlock: 'latest' })\n\t//Format filled orders\n\tconst filledOrders = tradeStream.map((event) => event.returnValues)\n\t//Add filled orders to the redux store\n\tdispatch(filledOrdersLoaded(filledOrders))\n\n\t//Fetch all orders with the \"Order\" event stream\n\tconst orderStream = await exchange.getPastEvents('Order', { fromBlock: 0, toBlock: 'latest' })\n\t//Format order stream\n\tconst allOrders = orderStream.map((event) => event.returnValues)\n\t//Add open orders to the redux store\n\tdispatch(allOrdersLoaded(allOrders))\n}\n\nexport const subscribeToEvents = async(exchange, dispatch) => {\n\texchange.events.Cancel({}, (error, event) => {\n\t\tdispatch(orderCancelled(event.returnValues))\n\t})\n\n\texchange.events.Trade({}, (error, event) => {\n\t\tdispatch(orderFilled(event.returnValues))\n\t})\n\n\texchange.events.Deposit({}, (error, event) => {\n\t\tdispatch(balancesLoaded())\n\t})\n\n\texchange.events.Withdraw({}, (error, event) => {\n\t\tdispatch(balancesLoaded())\n\t})\n\n\texchange.events.Order({}, (error, event) => {\n\t\tdispatch(orderMade(event.returnValues))\n\t})\n}\n\nexport const cancelOrder = (dispatch, exchange, order, account) => {\n\texchange.methods.cancelOrder(order.id).send({ from: account })\n\t.on('transactionHash', (hash) => {\n\t\tdispatch(orderCancelling())\n\t})\n\t.on('error', (error) => {\n\t\tconsole.log(error)\n\t\twindow.alert('There was an error!')\n\t})\n}\n\nexport const fillOrder = (dispatch, exchange, order, account) => {\n\texchange.methods.fillOrder(order.id).send({ from: account })\n\t.on('transactionHash', (hash) => {\n\t\tdispatch(orderFilling())\n\t})\n\t.on('error', (error) => {\n\t\tconsole.log(error)\n\t\twindow.alert('There was an error!')\n\t})\n}\n\nexport const loadBalances = async (dispatch, web3, exchange, token, account) => {\n\t// Ether balance in wallet\n\tconst etherBalance = await web3.eth.getBalance(account)\n\tdispatch(etherBalanceLoaded(etherBalance))\n\n\t// Token balance in wallet\n\tconst tokenBalance = await token.methods.balanceOf(account).call()\n\tdispatch(tokenBalanceLoaded(tokenBalance))\n\n\t// Ether balance in exchange\n\tconst exchangeEtherBalance = await exchange.methods.balanceOf(ETHER_ADDRESS, account).call()\n\tdispatch(exchangeEtherBalanceLoaded(exchangeEtherBalance))\n\n\t// Token balance in exchange\n\tconst exchangeTokenBalance = await exchange.methods.balanceOf(token.options.address, account).call()\n\tdispatch(exchangeTokenBalanceLoaded(exchangeTokenBalance))\n\n\t// Trigger all balances loaded\n\tdispatch(balancesLoaded())\n}\n\nexport const depositEther = (dispatch, exchange, web3, amount, account) => {\n\texchange.methods.depositEther().send({ from: account, value: web3.utils.toWei(amount, 'ether') })\n\t.on('transactionHash', (hash) => {\n\t\tdispatch(balancesLoading())\n\t})\n\t.on('error', (error) => {\n\t\tconsole.error(error)\n\t\twindow.alert(`There was an error!`)\n\t})\n}\n\nexport const withdrawEther = (dispatch, exchange, web3, amount, account) => {\n\texchange.methods.withdrawEther(web3.utils.toWei(amount, 'ether')).send({ from: account })\n\t.on('transactionHash', (hash) => {\n\t\tdispatch(balancesLoading())\n\t})\n\t.on('error', (error) => {\n\t\tconsole.error(error)\n\t\twindow.alert(`There was an error!`)\n\t})\n}\n\nexport const depositToken = (dispatch, exchange, web3, token, amount, account) => {\n\tamount = web3.utils.toWei(amount, 'ether')\n\n\ttoken.methods.approve(exchange.options.address, amount).send({ from: account })\n\t.on('transactionHash', (hash) => {\n\t\texchange.methods.depositToken(token.options.address, amount).send({ from: account })\n\t\t.on('transactionHash', (hash) => {\n\t\t\tdispatch(balancesLoading())\n\t\t})\n\t\t.on('error', (error) => {\n\t\t\tconsole.error(error)\n\t\t\twindow.alert(`There was an error!`)\n\t\t})\n\t})\n}\n\nexport const withdrawToken = (dispatch, exchange, web3, token, amount, account) => {\n\tamount = web3.utils.toWei(amount, 'ether')\n\n\texchange.methods.withdrawToken(token.options.address, amount).send({ from: account })\n\t.on('transactionHash', (hash) => {\n\t\tdispatch(balancesLoading())\n\t})\n\t.on('error', (error) => {\n\t\tconsole.error(error)\n\t\twindow.alert(`There was an error!`)\n\t})\n}\n\nexport const makeBuyOrder = (dispatch, exchange, token, web3, order, account) => {\n\tconsole.log(order.amount)\n\tconst tokenGet = token.options.address\n\tconst amountGet = web3.utils.toWei(order.amount, 'ether')\n\tconst tokenGive = ETHER_ADDRESS\n\tconst amountGive = web3.utils.toWei((order.amount * order.price).toString(), 'ether')\n\n\texchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({ from: account })\n\t.on('transactionHash', (hash) => {\n\t\tdispatch(buyOrderMaking())\n\t})\n\t.on('error', (error) => {\n\t\tconsole.error(error)\n\t\twindow.alert(`There was an error!`)\n\t})\n}\n\nexport const makeSellOrder = (dispatch, exchange, token, web3, order, account) => {\n\tconst tokenGet = ETHER_ADDRESS\n\tconst amountGet = web3.utils.toWei((order.amount * order.price).toString(), 'ether')\n\tconst tokenGive = token.options.address\n\tconst amountGive = web3.utils.toWei(order.amount, 'ether')\n\n\texchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({ from: account })\n\t.on('transactionHash', (hash) => {\n\t\tdispatch(sellOrderMaking())\n\t})\n\t.on('error', (error) => {\n\t\tconsole.error(error)\n\t\twindow.alert(`There was an error!`)\n\t})\n}\n\n// export const depositToken = (dispatch, exchange, web3, token, amount, account) => {\n// \tamount = web3.utils.toWei(amount, 'ether')\n\n// \ttoken.methods.approve(exchange.options.address, amount).send({ from: account })\n// \t.on('transactionHash', (hash) => {\n// \t\texchange.methods.depositToken(token.options.address, amount).send({ from: account })\n// \t\t.on('transactionHash', (hash) => {\n// \t\t\tdispatch(balancesLoading())\n// \t\t})\n// \t\t.on('error', (error) => {\n// \t\t\tconsole.error(error)\n// \t\t\twindow.alert(`There was an error!`)\n// \t\t})\n// \t})\t\n// }\n\n// export const withdrawToken = (dispatch, exchange, web3, token, amount, account) => {\n// \texchange.methods.withdrawToken(token.options.address, web3.utils.toWei(amount, 'ether')).send({ from: account })\n// \t.on('transactionHash', (hash) => {\n// \t\tdispatch(balancesLoading())\n// \t})\n// \t.on('error', (error) => {\n// \t\tconsole.error(error)\n// \t\twindow.alert(`There was an error!`)\n// \t})\n// }\n"]},"metadata":{},"sourceType":"module"}