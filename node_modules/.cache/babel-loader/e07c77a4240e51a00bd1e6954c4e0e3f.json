{"ast":null,"code":"import _slicedToArray from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { get, groupBy, reject, maxBy, minBy } from 'lodash';\nimport { createSelector } from 'reselect';\nimport moment from 'moment';\nimport { ETHER_ADDRESS, GREEN, RED, tokens, ether } from '../helpers'; // TODO: Move me to helpers file\n\nexport var formatBalance = function formatBalance(balance) {\n  var precision = 100; // 2 decimal places\n\n  balance = ether(balance);\n  balance = Math.round(balance * precision) / precision;\n  return balance;\n};\n\nvar account = function account(state) {\n  return get(state, 'web3.account');\n};\n\nexport var accountSelector = createSelector(account, function (a) {\n  return a;\n});\n\nvar web3 = function web3(state) {\n  return get(state, 'web3.connection');\n};\n\nexport var web3Selector = createSelector(web3, function (w) {\n  return w;\n});\n\nvar tokenLoaded = function tokenLoaded(state) {\n  return get(state, 'token.loaded', false);\n};\n\nexport var tokenLoadedSelector = createSelector(tokenLoaded, function (tl) {\n  return tl;\n});\n\nvar token = function token(state) {\n  return get(state, 'token.contract');\n};\n\nexport var tokenSelector = createSelector(token, function (t) {\n  return t;\n});\n\nvar exchangeLoaded = function exchangeLoaded(state) {\n  return get(state, 'exchange.loaded', false);\n};\n\nexport var exchangeLoadedSelector = createSelector(exchangeLoaded, function (el) {\n  return el;\n});\n\nvar exchange = function exchange(state) {\n  return get(state, 'exchange.contract');\n};\n\nexport var exchangeSelector = createSelector(exchange, function (e) {\n  return e;\n});\nexport var contractsLoadedSelector = createSelector(tokenLoaded, exchangeLoaded, function (tl, el) {\n  return tl && el;\n}); // All Orders\n\nvar allOrdersLoaded = function allOrdersLoaded(state) {\n  return get(state, 'exchange.allOrders.loaded', false);\n};\n\nvar allOrders = function allOrders(state) {\n  return get(state, 'exchange.allOrders.data', []);\n}; // Cancelled orders\n\n\nvar cancelledOrdersLoaded = function cancelledOrdersLoaded(state) {\n  return get(state, 'exchange.cancelledOrders.loaded', false);\n};\n\nexport var cancelledOrdersLoadedSelector = createSelector(cancelledOrdersLoaded, function (loaded) {\n  return loaded;\n});\n\nvar cancelledOrders = function cancelledOrders(state) {\n  return get(state, 'exchange.cancelledOrders.data', []);\n};\n\nexport var cancelledOrdersSelector = createSelector(cancelledOrders, function (o) {\n  return o;\n}); // Filled Orders\n\nvar filledOrdersLoaded = function filledOrdersLoaded(state) {\n  return get(state, 'exchange.filledOrders.loaded', false);\n};\n\nexport var filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, function (loaded) {\n  return loaded;\n});\n\nvar filledOrders = function filledOrders(state) {\n  return get(state, 'exchange.filledOrders.data', []);\n};\n\nexport var filledOrdersSelector = createSelector(filledOrders, function (orders) {\n  // Sort orders by date ascending for price comparison\n  orders = orders.sort(function (a, b) {\n    return a.timestamp - b.timestamp;\n  }); // Decorate the orders\n\n  orders = decorateFilledOrders(orders); // Sort orders by date descending for display\n\n  orders = orders.sort(function (a, b) {\n    return b.timestamp - a.timestamp;\n  });\n  return orders;\n});\n\nvar decorateFilledOrders = function decorateFilledOrders(orders) {\n  // Track previous order to compare history\n  var previousOrder = orders[0];\n  return orders.map(function (order) {\n    order = decorateOrder(order);\n    order = decorateFilledOrder(order, previousOrder);\n    previousOrder = order; // Update the previous order once it's decorated\n\n    return order;\n  });\n};\n\nvar decorateOrder = function decorateOrder(order) {\n  var etherAmount;\n  var tokenAmount;\n\n  if (order.tokenGive === ETHER_ADDRESS) {\n    etherAmount = order.amountGive;\n    tokenAmount = order.amountGet;\n  } else {\n    etherAmount = order.amountGet;\n    tokenAmount = order.amountGive;\n  } // Calculate token price to 5 decimal places\n\n\n  var precision = 100000;\n  var tokenPrice = etherAmount / tokenAmount;\n  tokenPrice = Math.round(tokenPrice * precision) / precision;\n  return _objectSpread(_objectSpread({}, order), {}, {\n    etherAmount: ether(etherAmount),\n    tokenAmount: tokens(tokenAmount),\n    tokenPrice,\n    formattedTimestamp: moment.unix(order.timestamp).format('h:mm:ss a M/D')\n  });\n};\n\nvar decorateFilledOrder = function decorateFilledOrder(order, previousOrder) {\n  return _objectSpread(_objectSpread({}, order), {}, {\n    tokenPriceClass: tokenPriceClass(order.tokenPrice, order.id, previousOrder)\n  });\n};\n\nvar tokenPriceClass = function tokenPriceClass(tokenPrice, orderId, previousOrder) {\n  // Show green price if only one order exists\n  if (previousOrder.id === orderId) {\n    return GREEN;\n  } // Show green price if order price higher than previous order\n  // Show red price if order price lower than previous order\n\n\n  if (previousOrder.tokenPrice <= tokenPrice) {\n    return GREEN; // success\n  } else {\n      return RED; // danger\n    }\n};\n\nvar openOrders = function openOrders(state) {\n  var all = allOrders(state);\n  var filled = filledOrders(state);\n  var cancelled = cancelledOrders(state);\n  var openOrders = reject(all, function (order) {\n    var orderFilled = filled.some(function (o) {\n      return o.id === order.id;\n    });\n    var orderCancelled = cancelled.some(function (o) {\n      return o.id === order.id;\n    });\n    return orderFilled || orderCancelled;\n  });\n  return openOrders;\n};\n\nvar orderBookLoaded = function orderBookLoaded(state) {\n  return cancelledOrdersLoaded(state) && filledOrdersLoaded(state) && allOrdersLoaded(state);\n};\n\nexport var orderBookLoadedSelector = createSelector(orderBookLoaded, function (loaded) {\n  return loaded;\n}); // Create the order book\n\nexport var orderBookSelector = createSelector(openOrders, function (orders) {\n  // Decorate orders\n  orders = decorateOrderBookOrders(orders); // Group orders by \"orderType\"\n\n  orders = groupBy(orders, 'orderType'); // Fetch buy orders\n\n  var buyOrders = get(orders, 'buy', []); // Sort buy orders by token price\n\n  orders = _objectSpread(_objectSpread({}, orders), {}, {\n    buyOrders: buyOrders.sort(function (a, b) {\n      return b.tokenPrice - a.tokenPrice;\n    })\n  }); // Fetch sell orders\n\n  var sellOrders = get(orders, 'sell', []); // Sort sell orders by token price\n\n  orders = _objectSpread(_objectSpread({}, orders), {}, {\n    sellOrders: sellOrders.sort(function (a, b) {\n      return b.tokenPrice - a.tokenPrice;\n    })\n  });\n  return orders;\n});\n\nvar decorateOrderBookOrders = function decorateOrderBookOrders(orders) {\n  return orders.map(function (order) {\n    order = decorateOrder(order);\n    order = decorateOrderBookOrder(order);\n    return order;\n  });\n};\n\nvar decorateOrderBookOrder = function decorateOrderBookOrder(order) {\n  var orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell';\n  return _objectSpread(_objectSpread({}, order), {}, {\n    orderType,\n    orderTypeClass: orderType === 'buy' ? GREEN : RED,\n    orderFillAction: orderType === 'buy' ? 'sell' : 'buy'\n  });\n};\n\nexport var myFilledOrdersLoadedSelector = createSelector(filledOrdersLoaded, function (loaded) {\n  return loaded;\n});\nexport var myFilledOrdersSelector = createSelector(account, filledOrders, function (account, orders) {\n  // Find our orders\n  orders = orders.filter(function (o) {\n    return o.user === account || o.userFill === account;\n  }); // Sort by date ascending\n\n  orders = orders.sort(function (a, b) {\n    return a.timestamp - b.timestamp;\n  }); // Decorate orders - add display attributes\n\n  orders = decorateMyFilledOrders(orders, account);\n  return orders;\n});\n\nvar decorateMyFilledOrders = function decorateMyFilledOrders(orders, account) {\n  return orders.map(function (order) {\n    order = decorateOrder(order);\n    order = decorateMyFilledOrder(order, account);\n    return order;\n  });\n};\n\nvar decorateMyFilledOrder = function decorateMyFilledOrder(order, account) {\n  var myOrder = order.user === account;\n  var orderType;\n\n  if (myOrder) {\n    orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell';\n  } else {\n    orderType = order.tokenGive === ETHER_ADDRESS ? 'sell' : 'buy';\n  }\n\n  return _objectSpread(_objectSpread({}, order), {}, {\n    orderType,\n    orderTypeClass: orderType === 'buy' ? GREEN : RED,\n    orderSign: orderType === 'buy' ? '+' : '-'\n  });\n};\n\nexport var myOpenOrdersLoadedSelector = createSelector(orderBookLoaded, function (loaded) {\n  return loaded;\n});\nexport var myOpenOrdersSelector = createSelector(account, openOrders, function (account, orders) {\n  // Filter orders created by current account\n  orders = orders.filter(function (o) {\n    return o.user === account;\n  }); // Decorate orders - add display attributes\n\n  orders = decorateMyOpenOrders(orders); // Sort orders by date descending\n\n  orders = orders.sort(function (a, b) {\n    return b.timestamp - a.timestamp;\n  });\n  return orders;\n});\n\nvar decorateMyOpenOrders = function decorateMyOpenOrders(orders, account) {\n  return orders.map(function (order) {\n    order = decorateOrder(order);\n    order = decorateMyOpenOrder(order, account);\n    return order;\n  });\n};\n\nvar decorateMyOpenOrder = function decorateMyOpenOrder(order, account) {\n  var orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell';\n  return _objectSpread(_objectSpread({}, order), {}, {\n    orderType,\n    orderTypeClass: orderType === 'buy' ? GREEN : RED\n  });\n};\n\nexport var priceChartLoadedSelector = createSelector(filledOrdersLoaded, function (loaded) {\n  return loaded;\n});\nexport var priceChartSelector = createSelector(filledOrders, function (orders) {\n  // Sort orders by date ascending to compare history\n  orders = orders.sort(function (a, b) {\n    return a.timestamp - b.timestamp;\n  }); // Decorate orders - add display attributes\n\n  orders = orders.map(function (o) {\n    return decorateOrder(o);\n  }); // Get last 2 orders for final price and price change\n\n  var secondLastOrder, lastOrder;\n\n  var _orders$slice = orders.slice(orders.length - 2, orders.length);\n\n  var _orders$slice2 = _slicedToArray(_orders$slice, 2);\n\n  secondLastOrder = _orders$slice2[0];\n  lastOrder = _orders$slice2[1];\n  // Get last order price\n  var lastPrice = get(lastOrder, 'tokenPrice', 0); // Get second last order price\n\n  var secondLastPrice = get(secondLastOrder, 'tokenPrice', 0);\n  return {\n    lastPrice,\n    lastPriceChange: lastPrice >= secondLastPrice ? '+' : '-',\n    series: [{\n      data: buildGraphData(orders)\n    }]\n  };\n});\n\nvar buildGraphData = function buildGraphData(orders) {\n  // Group the orders by hour for the graph\n  orders = groupBy(orders, function (o) {\n    return moment.unix(o.timestamp).startOf('hour').format();\n  }); // Get each hour where data exists\n\n  var hours = Object.keys(orders); // Build the graph series\n\n  var graphData = hours.map(function (hour) {\n    // Fetch all the orders from current hour\n    var group = orders[hour]; // Calculate price values - open, high, low, close\n\n    var open = group[0]; // first order\n\n    var high = maxBy(group, 'tokenPrice'); // high price\n\n    var low = minBy(group, 'tokenPrice'); // low price\n\n    var close = group[group.length - 1]; // last order\n\n    return {\n      x: new Date(hour),\n      y: [open.tokenPrice, high.tokenPrice, low.tokenPrice, close.tokenPrice]\n    };\n  });\n  return graphData;\n};\n\nvar orderCancelling = function orderCancelling(state) {\n  return get(state, 'exchange.orderCancelling', false);\n};\n\nexport var orderCancellingSelector = createSelector(orderCancelling, function (status) {\n  return status;\n});\n\nvar orderFilling = function orderFilling(state) {\n  return get(state, 'exchange.orderFilling', false);\n};\n\nexport var orderFillingSelector = createSelector(orderFilling, function (status) {\n  return status;\n}); // BALANCES\n\nvar balancesLoading = function balancesLoading(state) {\n  return get(state, 'exchange.balancesLoading', true);\n};\n\nexport var balancesLoadingSelector = createSelector(balancesLoading, function (status) {\n  return status;\n});\n\nvar etherBalance = function etherBalance(state) {\n  return get(state, 'web3.balance', 0);\n};\n\nexport var etherBalanceSelector = createSelector(etherBalance, function (balance) {\n  return formatBalance(balance);\n});\n\nvar tokenBalance = function tokenBalance(state) {\n  return get(state, 'token.balance', 0);\n};\n\nexport var tokenBalanceSelector = createSelector(tokenBalance, function (balance) {\n  return formatBalance(balance);\n});\n\nvar exchangeEtherBalance = function exchangeEtherBalance(state) {\n  return get(state, 'exchange.etherBalance', 0);\n};\n\nexport var exchangeEtherBalanceSelector = createSelector(exchangeEtherBalance, function (balance) {\n  return formatBalance(balance);\n});\n\nvar exchangeTokenBalance = function exchangeTokenBalance(state) {\n  return get(state, 'exchange.tokenBalance', 0);\n};\n\nexport var exchangeTokenBalanceSelector = createSelector(exchangeTokenBalance, function (balance) {\n  return formatBalance(balance);\n});","map":{"version":3,"sources":["/home/mitch/code/blockchain-developer-bootcamp/src/store/selectors.js"],"names":["get","groupBy","reject","maxBy","minBy","createSelector","moment","ETHER_ADDRESS","GREEN","RED","tokens","ether","formatBalance","balance","precision","Math","round","account","state","accountSelector","a","web3","web3Selector","w","tokenLoaded","tokenLoadedSelector","tl","token","tokenSelector","t","exchangeLoaded","exchangeLoadedSelector","el","exchange","exchangeSelector","e","contractsLoadedSelector","allOrdersLoaded","allOrders","cancelledOrdersLoaded","cancelledOrdersLoadedSelector","loaded","cancelledOrders","cancelledOrdersSelector","o","filledOrdersLoaded","filledOrdersLoadedSelector","filledOrders","filledOrdersSelector","orders","sort","b","timestamp","decorateFilledOrders","previousOrder","map","order","decorateOrder","decorateFilledOrder","etherAmount","tokenAmount","tokenGive","amountGive","amountGet","tokenPrice","formattedTimestamp","unix","format","tokenPriceClass","id","orderId","openOrders","all","filled","cancelled","orderFilled","some","orderCancelled","orderBookLoaded","orderBookLoadedSelector","orderBookSelector","decorateOrderBookOrders","buyOrders","sellOrders","decorateOrderBookOrder","orderType","orderTypeClass","orderFillAction","myFilledOrdersLoadedSelector","myFilledOrdersSelector","filter","user","userFill","decorateMyFilledOrders","decorateMyFilledOrder","myOrder","orderSign","myOpenOrdersLoadedSelector","myOpenOrdersSelector","decorateMyOpenOrders","decorateMyOpenOrder","priceChartLoadedSelector","priceChartSelector","secondLastOrder","lastOrder","slice","length","lastPrice","secondLastPrice","lastPriceChange","series","data","buildGraphData","startOf","hours","Object","keys","graphData","hour","group","open","high","low","close","x","Date","y","orderCancelling","orderCancellingSelector","status","orderFilling","orderFillingSelector","balancesLoading","balancesLoadingSelector","etherBalance","etherBalanceSelector","tokenBalance","tokenBalanceSelector","exchangeEtherBalance","exchangeEtherBalanceSelector","exchangeTokenBalance","exchangeTokenBalanceSelector"],"mappings":"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","sourcesContent":["import { get, groupBy, reject, maxBy, minBy } from 'lodash'\nimport { createSelector } from 'reselect'\nimport moment from 'moment'\nimport { ETHER_ADDRESS, GREEN, RED, tokens, ether } from '../helpers'\n\n// TODO: Move me to helpers file\nexport const formatBalance = (balance) => {\n  const precision = 100 // 2 decimal places\n\n  balance = ether(balance)\n  balance = Math.round(balance * precision) / precision\n  \n  return balance\n}\n\nconst account = state => get(state, 'web3.account')\nexport const accountSelector = createSelector(account, a => a)\n\nconst web3 = state => get(state, 'web3.connection')\nexport const web3Selector = createSelector(web3, w => w)\n\nconst tokenLoaded = state => get(state, 'token.loaded', false)\nexport const tokenLoadedSelector = createSelector(tokenLoaded, tl => tl)\n\nconst token = state => get(state, 'token.contract')\nexport const tokenSelector = createSelector(token, t => t)\n\nconst exchangeLoaded = state => get(state, 'exchange.loaded', false)\nexport const exchangeLoadedSelector = createSelector(exchangeLoaded, el => el)\n\nconst exchange = state => get(state, 'exchange.contract')\nexport const exchangeSelector = createSelector(exchange, e => e)\n\nexport const contractsLoadedSelector = createSelector(\n  tokenLoaded,\n  exchangeLoaded,\n  (tl, el) => (tl && el)\n)\n\n// All Orders\nconst allOrdersLoaded = state => get(state, 'exchange.allOrders.loaded', false)\nconst allOrders = state => get(state, 'exchange.allOrders.data', [])\n\n// Cancelled orders\nconst cancelledOrdersLoaded = state => get(state, 'exchange.cancelledOrders.loaded', false)\nexport const cancelledOrdersLoadedSelector = createSelector(cancelledOrdersLoaded, loaded => loaded)\n\nconst cancelledOrders = state => get(state, 'exchange.cancelledOrders.data', [])\nexport const cancelledOrdersSelector = createSelector(cancelledOrders, o => o)\n\n// Filled Orders\nconst filledOrdersLoaded = state => get(state, 'exchange.filledOrders.loaded', false)\nexport const filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\nconst filledOrders = state => get(state, 'exchange.filledOrders.data', [])\nexport const filledOrdersSelector = createSelector(\n  filledOrders,\n  (orders) => {\n    // Sort orders by date ascending for price comparison\n    orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n    // Decorate the orders\n    orders = decorateFilledOrders(orders)\n    // Sort orders by date descending for display\n    orders = orders.sort((a,b) => b.timestamp - a.timestamp)\n    return orders\n  }\n)\n\nconst decorateFilledOrders = (orders) => {\n  // Track previous order to compare history\n  let previousOrder = orders[0]\n  return(\n    orders.map((order) => {\n      order = decorateOrder(order)\n      order = decorateFilledOrder(order, previousOrder)\n      previousOrder = order // Update the previous order once it's decorated\n      return order\n    })\n  )\n}\n\nconst decorateOrder = (order) => {\n  let etherAmount\n  let tokenAmount\n\n  if(order.tokenGive === ETHER_ADDRESS) {\n    etherAmount = order.amountGive\n    tokenAmount = order.amountGet\n  } else {\n    etherAmount = order.amountGet\n    tokenAmount = order.amountGive\n  }\n\n  // Calculate token price to 5 decimal places\n  const precision = 100000\n  let tokenPrice = (etherAmount / tokenAmount)\n  tokenPrice = Math.round(tokenPrice * precision) / precision\n\n  return({\n    ...order,\n    etherAmount: ether(etherAmount),\n    tokenAmount: tokens(tokenAmount),\n    tokenPrice,\n    formattedTimestamp: moment.unix(order.timestamp).format('h:mm:ss a M/D')\n  })\n}\n\nconst decorateFilledOrder = (order, previousOrder) => {\n  return({\n    ...order,\n    tokenPriceClass: tokenPriceClass(order.tokenPrice, order.id, previousOrder)\n  })\n}\n\nconst tokenPriceClass = (tokenPrice, orderId, previousOrder) => {\n  // Show green price if only one order exists\n  if(previousOrder.id === orderId) {\n    return GREEN\n  }\n\n  // Show green price if order price higher than previous order\n  // Show red price if order price lower than previous order\n  if(previousOrder.tokenPrice <= tokenPrice) {\n    return GREEN // success\n  } else {\n    return RED // danger\n  }\n}\n\nconst openOrders = state => {\n  const all = allOrders(state)\n  const filled = filledOrders(state)\n  const cancelled = cancelledOrders(state)\n\n  const openOrders = reject(all, (order) => {\n    const orderFilled = filled.some((o) => o.id === order.id)\n    const orderCancelled = cancelled.some((o) => o.id === order.id)\n    return(orderFilled || orderCancelled)\n  })\n\n  return openOrders\n}\n\n\nconst orderBookLoaded = state => cancelledOrdersLoaded(state) && filledOrdersLoaded(state) && allOrdersLoaded(state)\nexport const orderBookLoadedSelector = createSelector(orderBookLoaded, loaded => loaded)\n\n// Create the order book\nexport const orderBookSelector = createSelector(\n  openOrders,\n  (orders) => {\n    // Decorate orders\n    orders = decorateOrderBookOrders(orders)\n    // Group orders by \"orderType\"\n    orders = groupBy(orders, 'orderType')\n    // Fetch buy orders\n    const buyOrders = get(orders, 'buy', [])\n    // Sort buy orders by token price\n    orders = {\n      ...orders,\n      buyOrders: buyOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\n    }\n    // Fetch sell orders\n    const sellOrders = get(orders, 'sell', [])\n    // Sort sell orders by token price\n    orders = {\n      ...orders,\n      sellOrders: sellOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\n    }\n    return orders\n  }\n)\n\nconst decorateOrderBookOrders = (orders) => {\n  return(\n    orders.map((order) => {\n      order = decorateOrder(order)\n      order = decorateOrderBookOrder(order)\n      return(order)\n    })\n  )\n}\n\nconst decorateOrderBookOrder = (order) => {\n  const orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n  return({\n    ...order,\n    orderType,\n    orderTypeClass: (orderType === 'buy' ? GREEN : RED),\n    orderFillAction: orderType === 'buy' ? 'sell' : 'buy'\n  })\n}\n\nexport const myFilledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\nexport const myFilledOrdersSelector = createSelector(\n  account,\n  filledOrders,\n  (account, orders) => {\n    // Find our orders\n    orders = orders.filter((o) => o.user === account || o.userFill === account)\n    // Sort by date ascending\n    orders = orders.sort((a,b) => a.timestamp - b.timestamp)\n    // Decorate orders - add display attributes\n    orders = decorateMyFilledOrders(orders, account)\n    return orders\n  }\n)\n\nconst decorateMyFilledOrders = (orders, account) => {\n  return(\n    orders.map((order) => {\n      order = decorateOrder(order)\n      order = decorateMyFilledOrder(order, account)\n      return(order)\n    })\n  )\n}\n\nconst decorateMyFilledOrder = (order, account) => {\n  const myOrder = order.user === account\n\n  let orderType\n  if(myOrder) {\n    orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n  } else {\n    orderType = order.tokenGive === ETHER_ADDRESS ? 'sell' : 'buy'\n  }\n\n  return({\n    ...order,\n    orderType,\n    orderTypeClass: (orderType === 'buy' ? GREEN : RED),\n    orderSign: (orderType === 'buy' ? '+' : '-')\n  })\n}\n\nexport const myOpenOrdersLoadedSelector = createSelector(orderBookLoaded, loaded => loaded)\n\nexport const myOpenOrdersSelector = createSelector(\n  account,\n  openOrders,\n  (account, orders) => {\n    // Filter orders created by current account\n    orders = orders.filter((o) => o.user === account)\n    // Decorate orders - add display attributes\n    orders = decorateMyOpenOrders(orders)\n    // Sort orders by date descending\n    orders = orders.sort((a,b) => b.timestamp - a.timestamp)\n    return orders\n  }\n)\n\nconst decorateMyOpenOrders = (orders, account) => {\n  return(\n    orders.map((order) => {\n      order = decorateOrder(order)\n      order = decorateMyOpenOrder(order, account)\n      return(order)\n    })\n  )\n}\n\nconst decorateMyOpenOrder = (order, account) => {\n  let orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n\n  return({\n    ...order,\n    orderType,\n    orderTypeClass: (orderType === 'buy' ? GREEN : RED)\n  })\n}\n\nexport const priceChartLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\nexport const priceChartSelector = createSelector(\n\tfilledOrders,\n\t(orders) => {\n\t\t// Sort orders by date ascending to compare history\n\t\torders = orders.sort((a,b) => a.timestamp - b.timestamp)\n\t\t// Decorate orders - add display attributes\n\t\torders = orders.map((o) => decorateOrder(o))\n\t\t// Get last 2 orders for final price and price change\n\t\tlet secondLastOrder, lastOrder\n\t\t[secondLastOrder, lastOrder] = orders.slice(orders.length - 2, orders.length)\n\t\t// Get last order price\n\t\tconst lastPrice = get(lastOrder, 'tokenPrice', 0)\n\t\t// Get second last order price\n\t\tconst secondLastPrice = get(secondLastOrder, 'tokenPrice', 0)\n\n\t\treturn({\n\t\t\tlastPrice,\n\t\t\tlastPriceChange: (lastPrice >= secondLastPrice ? '+' : '-'),\n\t\t\tseries: [{\n\t\t\t\tdata: buildGraphData(orders)\n\t\t\t}]\n\t\t})\n\t}\n)\n\nconst buildGraphData = (orders) => {\n\t// Group the orders by hour for the graph\n\torders = groupBy(orders, (o) => moment.unix(o.timestamp).startOf('hour').format())\n\t// Get each hour where data exists\n\tconst hours = Object.keys(orders)\n\t// Build the graph series\n\tconst graphData = hours.map((hour) => {\n\t\t// Fetch all the orders from current hour\n\t\tconst group = orders[hour]\n\t\t// Calculate price values - open, high, low, close\n\t\tconst open = group[0] // first order\n\t\tconst high = maxBy(group, 'tokenPrice')// high price\n\t\tconst low = minBy(group, 'tokenPrice')// low price\n\t\tconst close = group[group.length - 1]// last order\n\n\t\treturn({\n\t\t\tx: new Date(hour),\n\t\t\ty: [open.tokenPrice, high.tokenPrice, low.tokenPrice, close.tokenPrice]\n\t\t})\n\t})\n\treturn graphData\n}\n\nconst orderCancelling = state => get(state, 'exchange.orderCancelling', false)\nexport const orderCancellingSelector = createSelector(orderCancelling, status => status)\n\nconst orderFilling = state => get(state, 'exchange.orderFilling', false)\nexport const orderFillingSelector = createSelector(orderFilling, status => status)\n\n// BALANCES\nconst balancesLoading = state => get(state, 'exchange.balancesLoading', true)\nexport const balancesLoadingSelector = createSelector(balancesLoading, status => status)\n\nconst etherBalance = state => get(state, 'web3.balance', 0)\nexport const etherBalanceSelector = createSelector(\n  etherBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst tokenBalance = state => get(state, 'token.balance', 0)\nexport const tokenBalanceSelector = createSelector(\n  tokenBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst exchangeEtherBalance = state => get(state, 'exchange.etherBalance', 0)\nexport const exchangeEtherBalanceSelector = createSelector(\n  exchangeEtherBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n\nconst exchangeTokenBalance = state => get(state, 'exchange.tokenBalance', 0)\nexport const exchangeTokenBalanceSelector = createSelector (\n  exchangeTokenBalance,\n  (balance) => {\n    return formatBalance(balance)\n  }\n)\n"]},"metadata":{},"sourceType":"module"}