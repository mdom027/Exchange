{"ast":null,"code":"import _objectSpread from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { get } from 'lodash';\nimport { createSelector } from 'reselect';\nimport moment from 'moment';\nimport { ETHER_ADDRESS, GREEN, RED, tokens, ether } from '../helpers';\n\nvar account = function account(state) {\n  return get(state, 'web3.account');\n};\n\nexport var accountSelector = createSelector(account, function (a) {\n  return a;\n});\n\nvar tokenLoaded = function tokenLoaded(state) {\n  return get(state, 'token.loaded', false);\n};\n\nexport var tokenLoadedSelector = createSelector(tokenLoaded, function (tl) {\n  return tl;\n});\n\nvar exchangeLoaded = function exchangeLoaded(state) {\n  return get(state, 'exchange.loaded', false);\n};\n\nexport var exchangeLoadedSelector = createSelector(exchangeLoaded, function (el) {\n  return el;\n});\n\nvar exchange = function exchange(state) {\n  return get(state, 'exchange.contract');\n};\n\nexport var exchangeSelector = createSelector(exchange, function (e) {\n  return e;\n});\nexport var contractsLoadedSelector = createSelector(tokenLoaded, exchangeLoaded, function (tl, el) {\n  return tl && el;\n});\n\nvar filledOrdersLoaded = function filledOrdersLoaded(state) {\n  return get(state, 'exchange.filledOrders.loaded', false);\n};\n\nexport var filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, function (loaded) {\n  return loaded;\n});\n\nvar filledOrders = function filledOrders(state) {\n  return get(state, 'exchange.filledOrders.data', []);\n};\n\nexport var filledOrdersSelector = createSelector(filledOrders, function (orders) {\n  // Sort orders by date ascending for price comparison\n  orders = orders.sort(function (a, b) {\n    return a.timestamp - b.timestamp;\n  }); //Decorate the orders\n\n  orders = decorateFilledOrders(orders); //Sort orders by date descending\n\n  orders = orders.sort(function (a, b) {\n    return b.timestamp - a.timestamp;\n  });\n  console.log(orders);\n});\n\nvar decorateFilledOrders = function decorateFilledOrders(orders) {\n  // Track previous order to compare history\n  var previousOrder = orders[0];\n  return orders.map(function (order) {\n    order = decorateOrder(order);\n    order = decorateFilledOrder(order, previousOrder);\n    previousOrder = order;\n    return order;\n  });\n};\n\nvar decorateOrder = function decorateOrder(order) {\n  var etherAmount;\n  var tokenAmount; //if tokenGive\n\n  if (order.tokenGive == ETHER_ADDRESS) {\n    etherAmount = order.amountGive;\n    tokenAmount = order.amountGet;\n  } else {\n    etherAmount = order.amountGet;\n    tokenAmount = order.amountGive;\n  }\n\n  var precision = 100000;\n  var tokenPrice = etherAmount / tokenAmount;\n  tokenPrice = Math.round(tokenPrice * precision) / precision;\n  return _objectSpread(_objectSpread({}, order), {}, {\n    etherAmount: ether(etherAmount),\n    tokenAmount: tokens(tokenAmount),\n    tokenPrice,\n    formattedTimestamp: moment.unix(order.timestamp).format('h:mm:ss a M/D')\n  });\n};\n\nvar decorateFilledOrder = function decorateFilledOrder(order, previousOrder) {\n  return _objectSpread(_objectSpread({}, order), {}, {\n    tokenPriceClass: tokenPriceClass(order.tokenPrice, order.id, previousOrder)\n  });\n};\n\nvar tokenPriceClass = function tokenPriceClass(tokenPrice, orderId, previousOrder) {\n  // Show green price if only one order exists\n  if (previousOrder.id === orderId) {\n    return GREEN;\n  } // Show green price if order price higher than previous order\n  // Show red price if order price lower than previous order\n\n\n  if (previousOrder.tokenPrice <= tokenPrice) {\n    return GREEN; // success\n  } else {\n      return RED; // danger\n    }\n};","map":{"version":3,"sources":["/home/mitch/code/blockchain-developer-bootcamp/src/store/selectors.js"],"names":["get","createSelector","moment","ETHER_ADDRESS","GREEN","RED","tokens","ether","account","state","accountSelector","a","tokenLoaded","tokenLoadedSelector","tl","exchangeLoaded","exchangeLoadedSelector","el","exchange","exchangeSelector","e","contractsLoadedSelector","filledOrdersLoaded","filledOrdersLoadedSelector","loaded","filledOrders","filledOrdersSelector","orders","sort","b","timestamp","decorateFilledOrders","console","log","previousOrder","map","order","decorateOrder","decorateFilledOrder","etherAmount","tokenAmount","tokenGive","amountGive","amountGet","precision","tokenPrice","Math","round","formattedTimestamp","unix","format","tokenPriceClass","id","orderId"],"mappings":"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","sourcesContent":["import { get } from 'lodash'\nimport { createSelector } from 'reselect'\nimport moment from 'moment'\nimport { ETHER_ADDRESS, GREEN, RED, tokens, ether } from '../helpers'\n\nconst account = state => get(state, 'web3.account')\nexport const accountSelector = createSelector(account, a => a)\n\nconst tokenLoaded = state => get(state, 'token.loaded', false)\nexport const tokenLoadedSelector = createSelector(tokenLoaded, tl => tl)\n\nconst exchangeLoaded = state => get(state, 'exchange.loaded', false)\nexport const exchangeLoadedSelector = createSelector(exchangeLoaded, el => el)\n\nconst exchange = state => get(state, 'exchange.contract')\nexport const exchangeSelector = createSelector(exchange, e => e)\n\nexport const contractsLoadedSelector = createSelector(\n\ttokenLoaded,\n\texchangeLoaded,\n\t(tl, el) => (tl && el)\n)\n\nconst filledOrdersLoaded = state => get(state, 'exchange.filledOrders.loaded', false)\nexport const filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\nconst filledOrders = state => get(state, 'exchange.filledOrders.data', [])\nexport const filledOrdersSelector = createSelector(\n\tfilledOrders,\n\t(orders) => {\n\t\t// Sort orders by date ascending for price comparison\n\t\torders = orders.sort((a,b) => a.timestamp - b.timestamp)\n\t\t//Decorate the orders\n\t\torders = decorateFilledOrders(orders)\n\t\t//Sort orders by date descending\n\t\torders = orders.sort((a,b) => b.timestamp - a.timestamp)\n\t\tconsole.log(orders)\n\t}\n)\n\nconst decorateFilledOrders = (orders) => {\n\t// Track previous order to compare history\n\tlet previousOrder = orders[0]\n\treturn(\n\t\torders.map((order) => {\n\t\t\torder = decorateOrder(order)\n\t\t\torder = decorateFilledOrder(order, previousOrder)\n\t\t\tpreviousOrder = order\n\t\t\treturn order\n\t\t})\n\t)\n}\n\nconst decorateOrder = (order) => {\n\tlet etherAmount\n\tlet tokenAmount\n\n\t//if tokenGive\n\tif(order.tokenGive == ETHER_ADDRESS) {\n\t\tetherAmount = order.amountGive\n\t\ttokenAmount = order.amountGet\n\t} else {\n\t\tetherAmount = order.amountGet\n\t\ttokenAmount = order.amountGive\n\t}\n\n\tconst precision = 100000\n\tlet tokenPrice = (etherAmount / tokenAmount)\n\ttokenPrice = Math.round(tokenPrice * precision) / precision\n\n\treturn({\n\t\t...order,\n\t\tetherAmount: ether(etherAmount),\n\t\ttokenAmount: tokens(tokenAmount),\n\t\ttokenPrice,\n\t\tformattedTimestamp: moment.unix(order.timestamp).format('h:mm:ss a M/D')\n\t})\n}\n\nconst decorateFilledOrder = (order, previousOrder) => {\n\treturn({\n\t\t...order,\n\t\ttokenPriceClass: tokenPriceClass(order.tokenPrice, order.id, previousOrder)\n\t})\n}\n\nconst tokenPriceClass = (tokenPrice, orderId, previousOrder) => {\n\t// Show green price if only one order exists\n\tif(previousOrder.id === orderId) {\n\t\treturn GREEN\n\t}\n\n\t// Show green price if order price higher than previous order\n\t// Show red price if order price lower than previous order\n\tif(previousOrder.tokenPrice <= tokenPrice) {\n\t\treturn GREEN // success\n\t} else {\n\t\treturn RED // danger\n\t}\n}"]},"metadata":{},"sourceType":"module"}