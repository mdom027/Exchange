{"ast":null,"code":"import _regeneratorRuntime from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/mitch/code/blockchain-developer-bootcamp/src/components/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport Navbar from './Navbar';\nimport Content from './Navbar';\nimport { connect } from 'react-redux';\nimport { loadWeb3, loadAccount, loadToken, loadExchange } from '../store/interactions';\nimport { accountSelector } from '../store/selectors';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      this.loadBlockchainData(this.props.dispatch);\n    }\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n        var web3, network, networkId, accounts, token;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                web3 = loadWeb3(dispatch);\n                _context.next = 3;\n                return web3.eth.net.getNetworkType();\n\n              case 3:\n                network = _context.sent;\n                _context.next = 6;\n                return web3.eth.net.getId();\n\n              case 6:\n                networkId = _context.sent;\n                _context.next = 9;\n                return loadAccount(web3, dispatch);\n\n              case 9:\n                accounts = _context.sent;\n                token = loadToken(web3, networkId, dispatch);\n                loadExchange(web3, networkId, dispatch);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function loadBlockchainData(_x) {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Content, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nexport default connect(mapStateToProps)(App); //export default App;","map":{"version":3,"sources":["/home/mitch/code/blockchain-developer-bootcamp/src/components/App.js"],"names":["React","Component","Web3","Navbar","Content","connect","loadWeb3","loadAccount","loadToken","loadExchange","accountSelector","App","loadBlockchainData","props","dispatch","web3","eth","net","getNetworkType","network","getId","networkId","accounts","token","mapStateToProps","state"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACAC,QADA,EAEAC,WAFA,EAGAC,SAHA,EAIAC,YAJA,QAIoB,uBAJpB;AAKA,SAASC,eAAT,QAAgC,oBAAhC;;IAEMC,G;;;;;;;;;;;;;gDACwB;AAC1B,WAAKC,kBAAL,CAAwB,KAAKC,KAAL,CAAWC,QAAnC;AACD;;;;0GAEwBA,Q;;;;;;AACjBC,gBAAAA,I,GAAOT,QAAQ,CAACQ,QAAD,C;;uBACCC,IAAI,CAACC,GAAL,CAASC,GAAT,CAAaC,cAAb,E;;;AAAhBC,gBAAAA,O;;uBACkBJ,IAAI,CAACC,GAAL,CAASC,GAAT,CAAaG,KAAb,E;;;AAAlBC,gBAAAA,S;;uBACiBd,WAAW,CAACQ,IAAD,EAAOD,QAAP,C;;;AAA5BQ,gBAAAA,Q;AACAC,gBAAAA,K,GAAQf,SAAS,CAACO,IAAD,EAAOM,SAAP,EAAkBP,QAAlB,C;AACvBL,gBAAAA,YAAY,CAACM,IAAD,EAAOM,SAAP,EAAkBP,QAAlB,CAAZ;;;;;;;;;;;;;;;;;;6BAGO;AACP,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAMD;;;;EArBeb,S;;AAwBlB,SAASuB,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO,EAAP;AAGD;;AAED,eAAepB,OAAO,CAACmB,eAAD,CAAP,CAAyBb,GAAzB,CAAf,C,CAEA","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport Web3 from 'web3'\nimport Navbar from './Navbar'\nimport Content from './Navbar'\nimport { connect } from 'react-redux'\nimport { \nloadWeb3,\nloadAccount,\nloadToken,\nloadExchange } from '../store/interactions'\nimport { accountSelector } from '../store/selectors'\n\nclass App extends Component {\n  UNSAFE_componentWillMount() {\n    this.loadBlockchainData(this.props.dispatch)\n  }\n\n  async loadBlockchainData(dispatch) {\n    const web3 = loadWeb3(dispatch)\n    const network = await web3.eth.net.getNetworkType()\n    const networkId = await web3.eth.net.getId()\n    const accounts = await loadAccount(web3, dispatch)\n    const token = loadToken(web3, networkId, dispatch)\n    loadExchange(web3, networkId, dispatch)\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Content />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n\n//export default App;"]},"metadata":{},"sourceType":"module"}