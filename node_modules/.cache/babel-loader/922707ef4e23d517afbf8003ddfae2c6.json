{"ast":null,"code":"import _regeneratorRuntime from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport { web3Loaded, web3AccountLoaded, tokenLoaded, exchangeLoaded, cancelledOrdersLoaded, filledOrdersLoaded, allOrdersLoaded } from './actions';\nimport Token from '../abis/Token.json';\nimport Exchange from '../abis/Exchange.json';\nexport var loadWeb3 = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n    var web3;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            web3 = new Web3(window.ethereum);\n            window.ethereum.enable();\n            dispatch(web3Loaded(web3));\n            return _context.abrupt(\"return\", web3);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadWeb3(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var loadAccount = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(web3, dispatch) {\n    var accounts, account;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(\"web3: \", web3);\n            _context2.next = 3;\n            return web3.eth.getAccounts();\n\n          case 3:\n            accounts = _context2.sent;\n            account = accounts[0];\n            dispatch(web3AccountLoaded(account));\n            return _context2.abrupt(\"return\", account);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function loadAccount(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var loadToken = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(web3, networkId, dispatch) {\n    var token;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address);\n            dispatch(tokenLoaded(token));\n            return _context3.abrupt(\"return\", token);\n\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log('Contract not deployed to the current network. Please select another network with Metamask.');\n            return _context3.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 6]]);\n  }));\n\n  return function loadToken(_x4, _x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var loadExchange = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(web3, networkId, dispatch) {\n    var exchange;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address);\n            dispatch(exchangeLoaded(exchange));\n            return _context4.abrupt(\"return\", exchange);\n\n          case 6:\n            _context4.prev = 6;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.log('Contract not deployed to the current network. Please select another network with Metamask.');\n            return _context4.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 6]]);\n  }));\n\n  return function loadExchange(_x7, _x8, _x9) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var loadAllOrders = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(exchange, dispatch) {\n    var cancelStream, cancelledOrders, tradeStream, filledOrders, orderStream, allOrders;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return exchange.getPastEvents('Cancel', {\n              fromBlock: 0,\n              toBlock: 'latest'\n            });\n\n          case 2:\n            cancelStream = _context5.sent;\n            //Format cancelled orders\n            cancelledOrders = cancelStream.map(function (event) {\n              return event.returnValues;\n            }); //Add cancelled orders to the redux store\n\n            dispatch(cancelledOrdersLoaded(cancelledOrders)); //Fetch filled orders with the \"Trade\" event stream\n\n            _context5.next = 7;\n            return exchange.getPastEvents('Trade', {\n              fromBlock: 0,\n              toBlock: 'latest'\n            });\n\n          case 7:\n            tradeStream = _context5.sent;\n            //Format filled orders\n            filledOrders = tradeStream.map(function (event) {\n              return event.returnValues;\n            }); //Add filled orders to the redux store\n\n            dispatch(filledOrdersLoaded(filledOrders)); //Fetch all orders with the \"Order\" event stream\n\n            _context5.next = 12;\n            return exchange.getPastEvents('Order', {\n              fromBlock: 0,\n              toBlock: 'latest'\n            });\n\n          case 12:\n            orderStream = _context5.sent;\n            //Format order stream\n            allOrders = orderStream.map(function (event) {\n              return event.returnValues;\n            }); //Add open orders to the redux store\n\n            dispatch(allOrdersLoaded(allOrders));\n\n          case 15:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function loadAllOrders(_x10, _x11) {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/mitch/code/blockchain-developer-bootcamp/src/store/interactions.js"],"names":["Web3","web3Loaded","web3AccountLoaded","tokenLoaded","exchangeLoaded","cancelledOrdersLoaded","filledOrdersLoaded","allOrdersLoaded","Token","Exchange","loadWeb3","dispatch","web3","window","ethereum","enable","loadAccount","console","log","eth","getAccounts","accounts","account","loadToken","networkId","token","Contract","abi","networks","address","loadExchange","exchange","loadAllOrders","getPastEvents","fromBlock","toBlock","cancelStream","cancelledOrders","map","event","returnValues","tradeStream","filledOrders","orderStream","allOrders"],"mappings":"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","sourcesContent":["import Web3 from 'web3'\nimport { \n\tweb3Loaded,\n\tweb3AccountLoaded,\n\ttokenLoaded,\n\texchangeLoaded,\n\tcancelledOrdersLoaded,\n\tfilledOrdersLoaded,\n\tallOrdersLoaded\n} from './actions'\nimport Token from '../abis/Token.json'\nimport Exchange from '../abis/Exchange.json'\n\nexport const loadWeb3 = async (dispatch) => {\n\tconst web3 = new Web3(window.ethereum)\n\twindow.ethereum.enable()\n\tdispatch(web3Loaded(web3))\n\treturn web3\n}\n\nexport const loadAccount = async (web3, dispatch) => {\n\tconsole.log(\"web3: \", web3)\n\tconst accounts = await web3.eth.getAccounts()\n\tconst account = accounts[0]\n\tdispatch(web3AccountLoaded(account))\n\treturn account\n}\n\nexport const loadToken = async (web3, networkId, dispatch) => {\n\ttry{\n\t\tconst token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address)\n\t\tdispatch(tokenLoaded(token))\n\t\treturn token\n\t} catch (error) {\n\t\tconsole.log('Contract not deployed to the current network. Please select another network with Metamask.')\n\t\treturn null\n\t}\n}\n\nexport const loadExchange = async (web3, networkId, dispatch) => {\n\ttry{\n\t\tconst exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address)\n\t\tdispatch(exchangeLoaded(exchange))\n\t\treturn exchange\n\t} catch (error) {\n\t\tconsole.log('Contract not deployed to the current network. Please select another network with Metamask.')\n\t\treturn null\n\t}\n}\n\nexport const loadAllOrders = async (exchange, dispatch) => {\n\t//Fetch cancelled orders with the \"Cancel\" event stream\n\tconst cancelStream = await exchange.getPastEvents('Cancel', { fromBlock: 0, toBlock: 'latest' })\n\t//Format cancelled orders\n\tconst cancelledOrders = cancelStream.map((event) => event.returnValues)\n\t//Add cancelled orders to the redux store\n\tdispatch(cancelledOrdersLoaded(cancelledOrders))\n\n\t//Fetch filled orders with the \"Trade\" event stream\n\tconst tradeStream = await exchange.getPastEvents( 'Trade', { fromBlock: 0, toBlock: 'latest' })\n\t//Format filled orders\n\tconst filledOrders = tradeStream.map((event) => event.returnValues)\n\t//Add filled orders to the redux store\n\tdispatch(filledOrdersLoaded(filledOrders))\n\n\t//Fetch all orders with the \"Order\" event stream\n\tconst orderStream = await exchange.getPastEvents('Order', { fromBlock: 0, toBlock: 'latest' })\n\t//Format order stream\n\tconst allOrders = orderStream.map((event) => event.returnValues)\n\t//Add open orders to the redux store\n\tdispatch(allOrdersLoaded(allOrders))\n}"]},"metadata":{},"sourceType":"module"}