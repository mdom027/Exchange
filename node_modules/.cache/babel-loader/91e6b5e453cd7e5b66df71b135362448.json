{"ast":null,"code":"import _regeneratorRuntime from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport { web3Loaded, web3AccountLoaded, tokenLoaded } from './actions';\nimport Token from '../abis/Token.json'; //ethereum.enable()\n\nexport var loadWeb3 = function loadWeb3(dispatch) {\n  var web3 = new Web3(window.ethereum);\n  window.ethereum.enable();\n  dispatch(web3Loaded(web3));\n  return web3;\n};\nexport var loadAccount = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(web3, dispatch) {\n    var accounts, account;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"web3: \", web3);\n            _context.next = 3;\n            return web3.eth.getAccounts();\n\n          case 3:\n            accounts = _context.sent;\n            account = accounts[0];\n            dispatch(web3AccountLoaded(account));\n            return _context.abrupt(\"return\", account);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadAccount(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var loadToken = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(web3, networkId, dispatch) {\n    var token;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address);\n            dispatch(tokenLoaded(token));\n            return _context2.abrupt(\"return\", token);\n\n          case 6:\n            _context2.prev = 6;\n            _context2.t0 = _context2[\"catch\"](0);\n            window.alert('Contract not deployed to the current network. Please select another network with Metamask.');\n            return _context2.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 6]]);\n  }));\n\n  return function loadToken(_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/mitch/code/blockchain-developer-bootcamp/src/store/interactions.js"],"names":["Web3","web3Loaded","web3AccountLoaded","tokenLoaded","Token","loadWeb3","dispatch","web3","window","ethereum","enable","loadAccount","console","log","eth","getAccounts","accounts","account","loadToken","networkId","token","Contract","abi","networks","address","alert"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SACCC,UADD,EAECC,iBAFD,EAGCC,WAHD,QAIO,WAJP;AAKA,OAAOC,KAAP,MAAkB,oBAAlB,C,CAGA;;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAc;AACrC,MAAMC,IAAI,GAAG,IAAIP,IAAJ,CAASQ,MAAM,CAACC,QAAhB,CAAb;AACAD,EAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACAJ,EAAAA,QAAQ,CAACL,UAAU,CAACM,IAAD,CAAX,CAAR;AACA,SAAOA,IAAP;AACA,CALM;AAOP,OAAO,IAAMI,WAAW;AAAA,sEAAG,iBAAOJ,IAAP,EAAaD,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BM,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBN,IAAtB;AAD0B;AAAA,mBAEHA,IAAI,CAACO,GAAL,CAASC,WAAT,EAFG;;AAAA;AAEpBC,YAAAA,QAFoB;AAGpBC,YAAAA,OAHoB,GAGVD,QAAQ,CAAC,CAAD,CAHE;AAI1BV,YAAAA,QAAQ,CAACJ,iBAAiB,CAACe,OAAD,CAAlB,CAAR;AAJ0B,6CAKnBA,OALmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXN,WAAW;AAAA;AAAA;AAAA,GAAjB;AAQP,OAAO,IAAMO,SAAS;AAAA,uEAAG,kBAAOX,IAAP,EAAaY,SAAb,EAAwBb,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEjBc,YAAAA,KAFiB,GAET,IAAIb,IAAI,CAACO,GAAL,CAASO,QAAb,CAAsBjB,KAAK,CAACkB,GAA5B,EAAiClB,KAAK,CAACmB,QAAN,CAAeJ,SAAf,EAA0BK,OAA3D,CAFS;AAGvBlB,YAAAA,QAAQ,CAACH,WAAW,CAACiB,KAAD,CAAZ,CAAR;AAHuB,8CAIhBA,KAJgB;;AAAA;AAAA;AAAA;AAMvBZ,YAAAA,MAAM,CAACiB,KAAP,CAAa,4FAAb;AANuB,8CAOhB,IAPgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATP,SAAS;AAAA;AAAA;AAAA,GAAf","sourcesContent":["import Web3 from 'web3'\nimport { \n\tweb3Loaded,\n\tweb3AccountLoaded,\n\ttokenLoaded\n} from './actions'\nimport Token from '../abis/Token.json'\n\n\n//ethereum.enable()\n\nexport const loadWeb3 = (dispatch) => {\n\tconst web3 = new Web3(window.ethereum)\n\twindow.ethereum.enable()\n\tdispatch(web3Loaded(web3))\n\treturn web3\n}\n\nexport const loadAccount = async (web3, dispatch) => {\n\tconsole.log(\"web3: \", web3)\n\tconst accounts = await web3.eth.getAccounts()\n\tconst account = accounts[0]\n\tdispatch(web3AccountLoaded(account))\n\treturn account\n}\n\nexport const loadToken = async (web3, networkId, dispatch) => {\n\ttry{\n\t\tconst token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address)\n\t\tdispatch(tokenLoaded(token))\n\t\treturn token\n\t} catch (error) {\n\t\twindow.alert('Contract not deployed to the current network. Please select another network with Metamask.')\n\t\treturn null\n\t}\n}"]},"metadata":{},"sourceType":"module"}