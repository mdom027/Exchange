{"ast":null,"code":"import _toConsumableArray from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { combineReducers } from 'redux';\n\nfunction web3() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'WEB3_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        connection: action.connection\n      });\n\n    case 'WEB3_ACCOUNT_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        account: action.account\n      });\n\n    case 'ETHER_BALANCE_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        balance: action.balance\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction token() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'TOKEN_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loaded: true,\n        contract: action.contract\n      });\n\n    case 'TOKEN_BALANCE_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        balance: action.balance\n      });\n\n    default:\n      return state;\n  }\n}\n\nfunction exchange() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var index, data;\n\n  switch (action.type) {\n    case 'EXCHANGE_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loaded: true,\n        contract: action.contract\n      });\n\n    case 'CANCELLED_ORDERS_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cancelledOrders: {\n          loaded: true,\n          data: action.cancelledOrders\n        }\n      });\n\n    case 'FILLED_ORDERS_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        filledOrders: {\n          loaded: true,\n          data: action.filledOrders\n        }\n      });\n\n    case 'ALL_ORDERS_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allOrders: {\n          loaded: true,\n          data: action.allOrders\n        }\n      });\n\n    case 'ORDER_CANCELLING':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        orderCancelling: true\n      });\n\n    case 'ORDER_CANCELLED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        orderCancelling: false,\n        cancelledOrders: _objectSpread(_objectSpread({}, state.cancelledOrders), {}, {\n          data: [].concat(_toConsumableArray(state.cancelledOrders.data), [action.order])\n        })\n      });\n\n    case 'ORDER_FILLED':\n      // Prevent duplicate orders\n      index = state.filledOrders.data.findIndex(function (order) {\n        return order.id === action.order.id;\n      });\n\n      if (index === -1) {\n        data = [].concat(_toConsumableArray(state.filledOrders.data), [action.order]);\n      } else {\n        data = state.filledOrders.data;\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        orderFilling: false,\n        filledOrders: _objectSpread(_objectSpread({}, state.filledOrders), {}, {\n          data\n        })\n      });\n\n    case 'ORDER_FILLING':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        orderFilling: true\n      });\n\n    case 'EXCHANGE_ETHER_BALANCE_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        etherBalance: action.balance\n      });\n\n    case 'EXCHANGE_TOKEN_BALANCE_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tokenBalance: action.balance\n      });\n\n    case 'BALANCES_LOADING':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        balancesLoading: true\n      });\n\n    case 'BALANCES_LOADED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        balancesLoading: false\n      });\n\n    case 'ETHER_DEPOSIT_AMOUNT_CHANGED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        etherDepositAmount: action.amount\n      });\n\n    case 'ETHER_WITHDRAW_AMOUNT_CHANGED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        etherWithdrawAmount: action.amount\n      });\n\n    case 'TOKEN_DEPOSIT_AMOUNT_CHANGED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tokenDepositAmount: action.amount\n      });\n\n    case 'TOKEN_WITHDRAW_AMOUNT_CHANGED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tokenWithdrawAmount: action.amount\n      });\n\n    case 'BUY_ORDER_AMOUNT_CHANGED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        buyOrder: _objectSpread(_objectSpread({}, state.buyOrder), {}, {\n          amount: action.amount\n        })\n      });\n\n    case 'BUY_ORDER_PRICE_CHANGED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        buyOrder: _objectSpread(_objectSpread({}, state.buyOrder), {}, {\n          price: action.price\n        })\n      });\n\n    case 'BUY_ORDER_MAKING':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        buyOrder: _objectSpread(_objectSpread({}, state.buyOrder), {}, {\n          amount: null,\n          price: null,\n          making: true\n        })\n      });\n\n    case 'ORDER_MADE':\n      // Prevent duplicate orders\n      index = state.allOrders.data.findIndes(function (order) {\n        return order.id === action.order.id;\n      });\n\n      if (index === -1) {\n        data = [].concat(_toConsumableArray(state.allOrders.data), [action.order]);\n      } else {\n        data = state.allOrders.data;\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        allOrders: _objectSpread(_objectSpread({}, state.allOrders), {}, {\n          data\n        }),\n        buyOrder: _objectSpread(_objectSpread({}, state.buyOrder), {}, {\n          making: false\n        }),\n        sellOrder: _objectSpread(_objectSpread({}, state.sellOrder), {}, {\n          making: false\n        })\n      });\n\n    case 'SELL_ORDER_AMOUNT_CHANGED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        sellOrder: _objectSpread(_objectSpread({}, state.sellOrder), {}, {\n          amount: action.amount\n        })\n      });\n\n    case 'SELL_ORDER_PRICE_CHANGED':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        sellOrder: _objectSpread(_objectSpread({}, state.sellOrder), {}, {\n          price: action.price\n        })\n      });\n\n    case 'SELL_ORDER_MAKING':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        sellOrder: _objectSpread(_objectSpread({}, state.sellOrder), {}, {\n          amount: null,\n          price: null,\n          making: true\n        })\n      });\n\n    default:\n      return state;\n  }\n}\n\nvar rootReducer = combineReducers({\n  web3,\n  token,\n  exchange\n});\nexport default rootReducer;","map":{"version":3,"sources":["/home/mitch/code/blockchain-developer-bootcamp/src/store/reducers.js"],"names":["combineReducers","web3","state","action","type","connection","account","balance","token","loaded","contract","exchange","index","data","cancelledOrders","filledOrders","allOrders","orderCancelling","order","findIndex","id","orderFilling","etherBalance","tokenBalance","balancesLoading","etherDepositAmount","amount","etherWithdrawAmount","tokenDepositAmount","tokenWithdrawAmount","buyOrder","price","making","findIndes","sellOrder","rootReducer"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\n\nfunction web3(state = {}, action) {\n\tswitch (action.type) {\n\t\tcase 'WEB3_LOADED':\n\t\t\treturn { ...state, connection: action.connection }\n\t\tcase 'WEB3_ACCOUNT_LOADED':\n\t\t\treturn { ...state, account: action.account }\n\t\tcase 'ETHER_BALANCE_LOADED':\n\t\t\treturn { ...state, balance: action.balance }\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nfunction token(state = {}, action) {\n\tswitch (action.type) {\n\t\tcase 'TOKEN_LOADED':\n\t\t\treturn { ...state, loaded: true, contract: action.contract }\n\t\tcase 'TOKEN_BALANCE_LOADED':\n\t\t\treturn { ...state, balance: action.balance }\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nfunction exchange(state = {}, action) {\n\tlet index, data\n\n\tswitch (action.type) {\n\t\tcase 'EXCHANGE_LOADED':\n\t\t\treturn { ...state, loaded: true, contract: action.contract }\n\t\tcase 'CANCELLED_ORDERS_LOADED':\n\t\t\treturn { ...state, cancelledOrders: { loaded: true, data: action.cancelledOrders } }\n\t\tcase 'FILLED_ORDERS_LOADED':\n\t\t\treturn { ...state, filledOrders: { loaded: true, data: action.filledOrders } }\n\t\tcase 'ALL_ORDERS_LOADED':\n\t\t\treturn { ...state, allOrders: { loaded: true, data: action.allOrders } }\n\t\tcase 'ORDER_CANCELLING':\n\t\t\treturn { ...state, orderCancelling: true }\n\t\tcase 'ORDER_CANCELLED':\n\t\t\treturn{\n\t\t\t\t...state,\n\t\t\t\torderCancelling: false,\n\t\t\t\tcancelledOrders: {\n\t\t\t\t\t...state.cancelledOrders,\n\t\t\t\t\tdata: [\n\t\t\t\t\t\t...state.cancelledOrders.data,\n\t\t\t\t\t\taction.order\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n\t\tcase 'ORDER_FILLED':\n\t\t\t// Prevent duplicate orders\n\t\t\tindex = state.filledOrders.data.findIndex(order => order.id === action.order.id)\n\n\t\t\tif(index === -1) {\n\t\t\t\tdata = [...state.filledOrders.data, action.order]\n\t\t\t} else {\n\t\t\t\tdata = state.filledOrders.data\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\torderFilling: false,\n\t\t\t\tfilledOrders: {\n\t\t\t\t\t...state.filledOrders,\n\t\t\t\t\tdata\n\t\t\t\t}\n\t\t\t}\n\t\tcase 'ORDER_FILLING':\n\t\t\treturn { ...state, orderFilling: true }\n\t\tcase 'EXCHANGE_ETHER_BALANCE_LOADED':\n\t\t\treturn { ...state, etherBalance: action.balance }\n\t\tcase 'EXCHANGE_TOKEN_BALANCE_LOADED':\n\t\t\treturn { ...state, tokenBalance: action.balance }\n\t\tcase 'BALANCES_LOADING':\n\t\t\treturn { ...state, balancesLoading: true }\n\t\tcase 'BALANCES_LOADED':\n\t\t\treturn { ...state, balancesLoading: false }\n\t\tcase 'ETHER_DEPOSIT_AMOUNT_CHANGED':\n\t\t\treturn { ...state, etherDepositAmount: action.amount }\n\t\tcase 'ETHER_WITHDRAW_AMOUNT_CHANGED':\n\t\t\treturn { ...state, etherWithdrawAmount: action.amount }\n\t\tcase 'TOKEN_DEPOSIT_AMOUNT_CHANGED':\n\t\t\treturn { ...state, tokenDepositAmount: action.amount }\n\t\tcase 'TOKEN_WITHDRAW_AMOUNT_CHANGED':\n\t\t\treturn { ...state, tokenWithdrawAmount: action.amount }\n\n\t\tcase 'BUY_ORDER_AMOUNT_CHANGED':\n\t\t\treturn { ...state, buyOrder: { ...state.buyOrder, amount: action.amount } }\n\t\tcase 'BUY_ORDER_PRICE_CHANGED':\n\t\t\treturn { ...state, buyOrder: { ...state.buyOrder, price: action.price } }\n\t\tcase 'BUY_ORDER_MAKING':\n\t\t\treturn { ...state, buyOrder: { ...state.buyOrder, amount: null, price: null, making: true } }\n\t\tcase 'ORDER_MADE':\n\t\t\t// Prevent duplicate orders\n\t\t\tindex = state.allOrders.data.findIndes(order => order.id === action.order.id);\n\n\t\t\tif(index === -1) {\n\t\t\t\tdata = [...state.allOrders.data, action.order]\n\t\t\t} else {\n\t\t\t\tdata = state.allOrders.data\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tallOrders: {\n\t\t\t\t\t...state.allOrders,\n\t\t\t\t\tdata\n\t\t\t\t},\n\t\t\t\tbuyOrder: {\n\t\t\t\t\t...state.buyOrder,\n\t\t\t\t\tmaking: false\n\t\t\t\t},\n\t\t\t\tsellOrder: {\n\t\t\t\t\t...state.sellOrder,\n\t\t\t\t\tmaking: false\n\t\t\t\t}\n\t\t\t}\n\tcase 'SELL_ORDER_AMOUNT_CHANGED':\n\t\treturn { ...state, sellOrder: { ...state.sellOrder, amount: action.amount } }\n\tcase 'SELL_ORDER_PRICE_CHANGED':\n\t\treturn { ...state, sellOrder: { ...state.sellOrder, price: action.price } }\n\tcase 'SELL_ORDER_MAKING':\n\t\treturn { ...state, sellOrder: { ...state.sellOrder, amount: null, price: null, making: true } }\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nconst rootReducer = combineReducers({\n\tweb3,\n\ttoken,\n\texchange\n})\n\nexport default rootReducer"]},"metadata":{},"sourceType":"module"}