{"ast":null,"code":"import _regeneratorRuntime from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport { web3Loaded, web3AccountLoaded, tokenLoaded, exchangeLoaded } from './actions';\nimport Token from '../abis/Token.json';\nimport Exchange from '../abis/Exchange.json';\nexport var loadWeb3 = function loadWeb3(dispatch) {\n  var web3 = new Web3(window.ethereum);\n  window.ethereum.enable();\n  window.ethereum.on('chainChanged', function () {\n    document.location.reload();\n  });\n  dispatch(web3Loaded(web3));\n  return web3;\n};\nexport var loadAccount = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(web3, dispatch) {\n    var accounts, account;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"web3: \", web3);\n            _context.next = 3;\n            return web3.eth.getAccounts();\n\n          case 3:\n            accounts = _context.sent;\n            account = accounts[0];\n            dispatch(web3AccountLoaded(account));\n            return _context.abrupt(\"return\", account);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadAccount(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var loadToken = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(web3, networkId, dispatch) {\n    var token;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address);\n            dispatch(tokenLoaded(token));\n            return _context2.abrupt(\"return\", token);\n\n          case 6:\n            _context2.prev = 6;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log('Contract not deployed to the current network. Please select another network with Metamask.');\n            return _context2.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 6]]);\n  }));\n\n  return function loadToken(_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var loadExchange = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(web3, networkId, dispatch) {\n    var exchange;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address);\n            dispatch(exchangeLoaded(exchange));\n            return _context3.abrupt(\"return\", exchange);\n\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log('Contract not deployed to the current network. Please select another network with Metamask.');\n            return _context3.abrupt(\"return\", null);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 6]]);\n  }));\n\n  return function loadExchange(_x6, _x7, _x8) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/mitch/code/blockchain-developer-bootcamp/src/store/interactions.js"],"names":["Web3","web3Loaded","web3AccountLoaded","tokenLoaded","exchangeLoaded","Token","Exchange","loadWeb3","dispatch","web3","window","ethereum","enable","on","document","location","reload","loadAccount","console","log","eth","getAccounts","accounts","account","loadToken","networkId","token","Contract","abi","networks","address","loadExchange","exchange"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SACCC,UADD,EAECC,iBAFD,EAGCC,WAHD,EAICC,cAJD,QAKO,WALP;AAMA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAc;AACrC,MAAMC,IAAI,GAAG,IAAIT,IAAJ,CAASU,MAAM,CAACC,QAAhB,CAAb;AACAD,EAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACAF,EAAAA,MAAM,CAACC,QAAP,CAAgBE,EAAhB,CAAmB,cAAnB,EAAmC,YAAM;AACtCC,IAAAA,QAAQ,CAACC,QAAT,CAAkBC,MAAlB;AACF,GAFD;AAGAR,EAAAA,QAAQ,CAACP,UAAU,CAACQ,IAAD,CAAX,CAAR;AACA,SAAOA,IAAP;AACA,CARM;AAUP,OAAO,IAAMQ,WAAW;AAAA,sEAAG,iBAAOR,IAAP,EAAaD,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BU,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBV,IAAtB;AAD0B;AAAA,mBAEHA,IAAI,CAACW,GAAL,CAASC,WAAT,EAFG;;AAAA;AAEpBC,YAAAA,QAFoB;AAGpBC,YAAAA,OAHoB,GAGVD,QAAQ,CAAC,CAAD,CAHE;AAI1Bd,YAAAA,QAAQ,CAACN,iBAAiB,CAACqB,OAAD,CAAlB,CAAR;AAJ0B,6CAKnBA,OALmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXN,WAAW;AAAA;AAAA;AAAA,GAAjB;AAQP,OAAO,IAAMO,SAAS;AAAA,uEAAG,kBAAOf,IAAP,EAAagB,SAAb,EAAwBjB,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEjBkB,YAAAA,KAFiB,GAET,IAAIjB,IAAI,CAACW,GAAL,CAASO,QAAb,CAAsBtB,KAAK,CAACuB,GAA5B,EAAiCvB,KAAK,CAACwB,QAAN,CAAeJ,SAAf,EAA0BK,OAA3D,CAFS;AAGvBtB,YAAAA,QAAQ,CAACL,WAAW,CAACuB,KAAD,CAAZ,CAAR;AAHuB,8CAIhBA,KAJgB;;AAAA;AAAA;AAAA;AAMvBR,YAAAA,OAAO,CAACC,GAAR,CAAY,4FAAZ;AANuB,8CAOhB,IAPgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATK,SAAS;AAAA;AAAA;AAAA,GAAf;AAWP,OAAO,IAAMO,YAAY;AAAA,uEAAG,kBAAOtB,IAAP,EAAagB,SAAb,EAAwBjB,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpBwB,YAAAA,QAFoB,GAET,IAAIvB,IAAI,CAACW,GAAL,CAASO,QAAb,CAAsBrB,QAAQ,CAACsB,GAA/B,EAAoCtB,QAAQ,CAACuB,QAAT,CAAkBJ,SAAlB,EAA6BK,OAAjE,CAFS;AAG1BtB,YAAAA,QAAQ,CAACJ,cAAc,CAAC4B,QAAD,CAAf,CAAR;AAH0B,8CAInBA,QAJmB;;AAAA;AAAA;AAAA;AAM1Bd,YAAAA,OAAO,CAACC,GAAR,CAAY,4FAAZ;AAN0B,8CAOnB,IAPmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZY,YAAY;AAAA;AAAA;AAAA,GAAlB","sourcesContent":["import Web3 from 'web3'\nimport { \n\tweb3Loaded,\n\tweb3AccountLoaded,\n\ttokenLoaded,\n\texchangeLoaded\n} from './actions'\nimport Token from '../abis/Token.json'\nimport Exchange from '../abis/Exchange.json'\n\nexport const loadWeb3 = (dispatch) => {\n\tconst web3 = new Web3(window.ethereum)\n\twindow.ethereum.enable()\n\twindow.ethereum.on('chainChanged', () => {\n  \t\tdocument.location.reload()\n\t})\n\tdispatch(web3Loaded(web3))\n\treturn web3\n}\n\nexport const loadAccount = async (web3, dispatch) => {\n\tconsole.log(\"web3: \", web3)\n\tconst accounts = await web3.eth.getAccounts()\n\tconst account = accounts[0]\n\tdispatch(web3AccountLoaded(account))\n\treturn account\n}\n\nexport const loadToken = async (web3, networkId, dispatch) => {\n\ttry{\n\t\tconst token = new web3.eth.Contract(Token.abi, Token.networks[networkId].address)\n\t\tdispatch(tokenLoaded(token))\n\t\treturn token\n\t} catch (error) {\n\t\tconsole.log('Contract not deployed to the current network. Please select another network with Metamask.')\n\t\treturn null\n\t}\n}\n\nexport const loadExchange = async (web3, networkId, dispatch) => {\n\ttry{\n\t\tconst exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address)\n\t\tdispatch(exchangeLoaded(exchange))\n\t\treturn exchange\n\t} catch (error) {\n\t\tconsole.log('Contract not deployed to the current network. Please select another network with Metamask.')\n\t\treturn null\n\t}\n}"]},"metadata":{},"sourceType":"module"}