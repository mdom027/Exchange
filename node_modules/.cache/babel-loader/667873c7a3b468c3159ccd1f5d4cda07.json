{"ast":null,"code":"import _objectSpread from \"/home/mitch/code/blockchain-developer-bootcamp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { get, groupBy, reject } from 'lodash';\nimport { createSelector } from 'reselect';\nimport moment from 'moment';\nimport { ETHER_ADDRESS, GREEN, RED, tokens, ether } from '../helpers';\n\nvar account = function account(state) {\n  return get(state, 'web3.account');\n};\n\nexport var accountSelector = createSelector(account, function (a) {\n  return a;\n});\n\nvar tokenLoaded = function tokenLoaded(state) {\n  return get(state, 'token.loaded', false);\n};\n\nexport var tokenLoadedSelector = createSelector(tokenLoaded, function (tl) {\n  return tl;\n});\n\nvar exchangeLoaded = function exchangeLoaded(state) {\n  return get(state, 'exchange.loaded', false);\n};\n\nexport var exchangeLoadedSelector = createSelector(exchangeLoaded, function (el) {\n  return el;\n});\n\nvar exchange = function exchange(state) {\n  return get(state, 'exchange.contract');\n};\n\nexport var exchangeSelector = createSelector(exchange, function (e) {\n  return e;\n});\nexport var contractsLoadedSelector = createSelector(tokenLoaded, exchangeLoaded, function (tl, el) {\n  return tl && el;\n}); // All orders\n\nvar allOrdersLoaded = function allOrdersLoaded(state) {\n  return get(state, 'exchange.allOrders.loaded', false);\n};\n\nvar allOrders = function allOrders(state) {\n  return get(state, 'exchange.allorders.data', []);\n}; // Cancelled Orders\n\n\nvar cancelledOrdersLoaded = function cancelledOrdersLoaded(state) {\n  return get(state, 'exchange.cancelledOrders.loaded', false);\n};\n\nexport var cancelledOrdersLoadedSelector = createSelector(cancelledOrdersLoaded, function (loaded) {\n  return loaded;\n});\n\nvar cancelledOrders = function cancelledOrders(state) {\n  return get(state, 'exchange.cancelledOrders.data', []);\n};\n\nexport var cancelledOrdersSelector = createSelector(cancelledOrders, function (o) {\n  return o;\n}); // Filled Orders\n\nvar filledOrdersLoaded = function filledOrdersLoaded(state) {\n  return get(state, 'exchange.filledOrders.loaded', false);\n};\n\nexport var filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, function (loaded) {\n  return loaded;\n});\n\nvar filledOrders = function filledOrders(state) {\n  return get(state, 'exchange.filledOrders.data', []);\n};\n\nexport var filledOrdersSelector = createSelector(filledOrders, function (orders) {\n  // Sort orders by date ascending for price comparison\n  orders = orders.sort(function (a, b) {\n    return a.timestamp - b.timestamp;\n  }); //Decorate the orders\n\n  orders = decorateFilledOrders(orders); //Sort orders by date descending\n\n  orders = orders.sort(function (a, b) {\n    return b.timestamp - a.timestamp;\n  });\n  return orders;\n});\n\nvar decorateFilledOrders = function decorateFilledOrders(orders) {\n  // Track previous order to compare history\n  var previousOrder = orders[0];\n  return orders.map(function (order) {\n    order = decorateOrder(order);\n    order = decorateFilledOrder(order, previousOrder);\n    previousOrder = order;\n    return order;\n  });\n};\n\nvar decorateOrder = function decorateOrder(order) {\n  var etherAmount;\n  var tokenAmount; //if tokenGive\n\n  if (order.tokenGive == ETHER_ADDRESS) {\n    etherAmount = order.amountGive;\n    tokenAmount = order.amountGet;\n  } else {\n    etherAmount = order.amountGet;\n    tokenAmount = order.amountGive;\n  }\n\n  var precision = 100000;\n  var tokenPrice = etherAmount / tokenAmount;\n  tokenPrice = Math.round(tokenPrice * precision) / precision;\n  return _objectSpread(_objectSpread({}, order), {}, {\n    etherAmount: ether(etherAmount),\n    tokenAmount: tokens(tokenAmount),\n    tokenPrice,\n    formattedTimestamp: moment.unix(order.timestamp).format('h:mm:ss a M/D')\n  });\n};\n\nvar decorateFilledOrder = function decorateFilledOrder(order, previousOrder) {\n  return _objectSpread(_objectSpread({}, order), {}, {\n    tokenPriceClass: tokenPriceClass(order.tokenPrice, order.id, previousOrder)\n  });\n};\n\nvar tokenPriceClass = function tokenPriceClass(tokenPrice, orderId, previousOrder) {\n  // Show green price if only one order exists\n  if (previousOrder.id === orderId) {\n    return GREEN;\n  } // Show green price if order price higher than previous order\n  // Show red price if order price lower than previous order\n\n\n  if (previousOrder.tokenPrice <= tokenPrice) {\n    return GREEN; // success\n  } else {\n      return RED; // danger\n    }\n};\n\nvar openOrders = function openOrders(state) {\n  var all = allOrders(state);\n  var cancelled = cancelledOrders(state);\n  var filled = filledOrders(state);\n  var openOrders = reject(all, function (order) {\n    var orderFilled = filled.some(function (o) {\n      return o.id === order.id;\n    });\n    var orderCancelled = cancelled.some(function (o) {\n      return o.id === order.id;\n    });\n    return orderFilled || orderCancelled;\n  });\n  return openOrders;\n};\n\nvar orderBookLoaded = function orderBookLoaded(state) {\n  return cancelledOrdersLoaded(state) && filledOrdersLoaded(state) && allOrdersLoaded(state);\n}; // Create the order book\n\n\nexport var orderBookSelector = createSelector(openOrders, function (orders) {\n  // Decorate orders\n  orders = decorateOrderBookOrders(orders); // Group orders by \"orderType\"\n\n  orders = groupBy(orders, 'orderType'); // Feth buy orders\n\n  var buyOrders = get(orders, 'buy', []); // Sort buy orders by token price\n\n  orders = _objectSpread(_objectSpread({}, orders), {}, {\n    buyOrders: buyOrders.sort(function (a, b) {\n      return b.tokenPrice - a.tokenPrice;\n    })\n  }); // Feth sell orders\n\n  var sellOrders = get(orders, 'sell', []); // Sort sell orders by token price\n\n  orders = _objectSpread(_objectSpread({}, orders), {}, {\n    sellOrders: sellOrders.sort(function (a, b) {\n      return b.tokenPrice - a.tokenPrice;\n    })\n  });\n  return orders;\n});\n\nvar decorateOrderBookOrders = function decorateOrderBookOrders(orders) {\n  return orders.map(function (order) {\n    order = decorateOrder(order); // Decorate order book order...\n\n    return order;\n  });\n};\n\nvar decorateOrderBookOrder = function decorateOrderBookOrder(order) {\n  var orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell';\n  return _objectSpread(_objectSpread({}, order), {}, {\n    orderType,\n    orderTypeClass: orderType === 'buy' ? GREEN : RED,\n    orderFillClass: orderType === 'buy' ? 'sell' : 'buy'\n  });\n};","map":{"version":3,"sources":["/home/mitch/code/blockchain-developer-bootcamp/src/store/selectors.js"],"names":["get","groupBy","reject","createSelector","moment","ETHER_ADDRESS","GREEN","RED","tokens","ether","account","state","accountSelector","a","tokenLoaded","tokenLoadedSelector","tl","exchangeLoaded","exchangeLoadedSelector","el","exchange","exchangeSelector","e","contractsLoadedSelector","allOrdersLoaded","allOrders","cancelledOrdersLoaded","cancelledOrdersLoadedSelector","loaded","cancelledOrders","cancelledOrdersSelector","o","filledOrdersLoaded","filledOrdersLoadedSelector","filledOrders","filledOrdersSelector","orders","sort","b","timestamp","decorateFilledOrders","previousOrder","map","order","decorateOrder","decorateFilledOrder","etherAmount","tokenAmount","tokenGive","amountGive","amountGet","precision","tokenPrice","Math","round","formattedTimestamp","unix","format","tokenPriceClass","id","orderId","openOrders","all","cancelled","filled","orderFilled","some","orderCancelled","orderBookLoaded","orderBookSelector","decorateOrderBookOrders","buyOrders","sellOrders","decorateOrderBookOrder","orderType","orderTypeClass","orderFillClass"],"mappings":"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","sourcesContent":["import { get, groupBy, reject } from 'lodash'\nimport { createSelector } from 'reselect'\nimport moment from 'moment'\nimport { ETHER_ADDRESS, GREEN, RED, tokens, ether } from '../helpers'\n\nconst account = state => get(state, 'web3.account')\nexport const accountSelector = createSelector(account, a => a)\n\nconst tokenLoaded = state => get(state, 'token.loaded', false)\nexport const tokenLoadedSelector = createSelector(tokenLoaded, tl => tl)\n\nconst exchangeLoaded = state => get(state, 'exchange.loaded', false)\nexport const exchangeLoadedSelector = createSelector(exchangeLoaded, el => el)\n\nconst exchange = state => get(state, 'exchange.contract')\nexport const exchangeSelector = createSelector(exchange, e => e)\n\nexport const contractsLoadedSelector = createSelector(\n\ttokenLoaded,\n\texchangeLoaded,\n\t(tl, el) => (tl && el)\n)\n\n// All orders\nconst allOrdersLoaded = state => get(state, 'exchange.allOrders.loaded', false)\nconst allOrders = state => get(state, 'exchange.allorders.data', [])\n\n// Cancelled Orders\nconst cancelledOrdersLoaded = state => get(state, 'exchange.cancelledOrders.loaded', false)\nexport const cancelledOrdersLoadedSelector = createSelector(cancelledOrdersLoaded, loaded => loaded)\n\nconst cancelledOrders = state => get(state, 'exchange.cancelledOrders.data', [])\nexport const cancelledOrdersSelector = createSelector(cancelledOrders, o => o)\n\n// Filled Orders\nconst filledOrdersLoaded = state => get(state, 'exchange.filledOrders.loaded', false)\nexport const filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\n\nconst filledOrders = state => get(state, 'exchange.filledOrders.data', [])\nexport const filledOrdersSelector = createSelector(\n\tfilledOrders,\n\t(orders) => {\n\t\t// Sort orders by date ascending for price comparison\n\t\torders = orders.sort((a,b) => a.timestamp - b.timestamp)\n\t\t//Decorate the orders\n\t\torders = decorateFilledOrders(orders)\n\t\t//Sort orders by date descending\n\t\torders = orders.sort((a,b) => b.timestamp - a.timestamp)\n\t\treturn orders\n\t}\n)\n\nconst decorateFilledOrders = (orders) => {\n\t// Track previous order to compare history\n\tlet previousOrder = orders[0]\n\treturn(\n\t\torders.map((order) => {\n\t\t\torder = decorateOrder(order)\n\t\t\torder = decorateFilledOrder(order, previousOrder)\n\t\t\tpreviousOrder = order\n\t\t\treturn order\n\t\t})\n\t)\n}\n\nconst decorateOrder = (order) => {\n\tlet etherAmount\n\tlet tokenAmount\n\n\t//if tokenGive\n\tif(order.tokenGive == ETHER_ADDRESS) {\n\t\tetherAmount = order.amountGive\n\t\ttokenAmount = order.amountGet\n\t} else {\n\t\tetherAmount = order.amountGet\n\t\ttokenAmount = order.amountGive\n\t}\n\n\tconst precision = 100000\n\tlet tokenPrice = (etherAmount / tokenAmount)\n\ttokenPrice = Math.round(tokenPrice * precision) / precision\n\n\treturn({\n\t\t...order,\n\t\tetherAmount: ether(etherAmount),\n\t\ttokenAmount: tokens(tokenAmount),\n\t\ttokenPrice,\n\t\tformattedTimestamp: moment.unix(order.timestamp).format('h:mm:ss a M/D')\n\t})\n}\n\nconst decorateFilledOrder = (order, previousOrder) => {\n\treturn({\n\t\t...order,\n\t\ttokenPriceClass: tokenPriceClass(order.tokenPrice, order.id, previousOrder)\n\t})\n}\n\nconst tokenPriceClass = (tokenPrice, orderId, previousOrder) => {\n\t// Show green price if only one order exists\n\tif(previousOrder.id === orderId) {\n\t\treturn GREEN\n\t}\n\n\t// Show green price if order price higher than previous order\n\t// Show red price if order price lower than previous order\n\tif(previousOrder.tokenPrice <= tokenPrice) {\n\t\treturn GREEN // success\n\t} else {\n\t\treturn RED // danger\n\t}\n}\n\nconst openOrders = state => {\n\tconst all = allOrders(state)\n\tconst cancelled = cancelledOrders(state)\n\tconst filled = filledOrders(state)\n\n\tconst openOrders = reject(all, (order) => {\n\t\tconst orderFilled = filled.some((o) => o.id === order.id)\n\t\tconst orderCancelled = cancelled.some((o) => o.id === order.id)\n\t\treturn(orderFilled || orderCancelled)\n\t})\n\n\treturn openOrders\n}\n\n\nconst orderBookLoaded = state => cancelledOrdersLoaded(state) && filledOrdersLoaded(state) && allOrdersLoaded(state)\n\n// Create the order book\nexport const orderBookSelector = createSelector(\n\topenOrders,\n\t(orders) => {\n\t\t// Decorate orders\n\t\torders = decorateOrderBookOrders(orders)\n\t\t// Group orders by \"orderType\"\n\t\torders = groupBy(orders, 'orderType')\n\t\t// Feth buy orders\n\t\tconst buyOrders = get(orders, 'buy', [])\n\t\t// Sort buy orders by token price\n\t\torders = {\n\t\t\t...orders,\n\t\t\tbuyOrders: buyOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\n\t\t}\n\t\t// Feth sell orders\n\t\tconst sellOrders = get(orders, 'sell', [])\n\t\t// Sort sell orders by token price\n\t\torders = {\n\t\t\t...orders,\n\t\t\tsellOrders: sellOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\n\t\t}\n\t\treturn orders\n\t}\n)\n\nconst decorateOrderBookOrders = (orders) => {\n\treturn(\n\t\torders.map((order) => {\n\t\t\torder = decorateOrder(order)\n\t\t\t// Decorate order book order...\n\t\t\treturn(order)\n\t\t})\n\t)\n}\n\nconst decorateOrderBookOrder = (order) => {\n\tconst orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\n\treturn ({\n\t\t...order,\n\t\torderType,\n\t\torderTypeClass: (orderType === 'buy' ? GREEN : RED),\n\t\torderFillClass: (orderType === 'buy' ? 'sell' : 'buy')\n\t})\n}"]},"metadata":{},"sourceType":"module"}